{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { Controller } from \"stimulus\";\nimport WebMidi from 'webmidi';\nimport videojs from '../../helpers/video.js';\nimport { toTheNearestThousandth, randoMize } from '../../helpers/math';\nimport { NUDGE_AMOUNT, baseUrl } from '../../helpers/constants';\nimport { savePattern, generatePatternClip as _generatePatternClip } from '../../helpers/network';\n\nvar _default = /*#__PURE__*/function (_Controller) {\n  _inherits(_default, _Controller);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"connect\",\n    value: function connect() {\n      this.piano = {};\n      this.pianoData = {};\n      this.pianoTextData = {};\n      this.recordingSessionOpen = false;\n      this.recording = false;\n      this.midiEvents = [];\n      this.startingTime = null;\n      this.clockSignalsPassedSinceRecordStart = 0;\n      this.video = videojs(this.videoTarget.id);\n      this.selectedKey = null;\n\n      this._observe_all_keys();\n\n      this._enable_midi();\n\n      this.saveAndNavigate = this.saveAndNavigate.bind(this);\n\n      this._addKeyDownChannelListener();\n\n      this._initializePianoData(); //everytime a new notes comes in we will add it \n\n\n      this.isSeeking = false; //? text styling\n\n      this.positionTextForVideo();\n      this.positionTextOnWindowResize();\n\n      this._initializeTextData(); // the current 'mode' either, selecting or demoing midi \n\n\n      this.selecting = true;\n      this.videoPlaying = false;\n      this.lastNote = null;\n    }\n  }, {\n    key: \"updateCurrentNoteTextPosition\",\n    value: function updateCurrentNoteTextPosition() {\n      this.pianoTextData.bot;\n    } // onNote\n\n  }, {\n    key: \"toggleSelectMode\",\n    value: function toggleSelectMode() {\n      this.selecting = !this.selecting;\n      this.updateUIFromModeChange();\n\n      this._resetMidiListeners(); // reset midi play listener\n\n    }\n  }, {\n    key: \"updateUIFromModeChange\",\n    value: function updateUIFromModeChange() {\n      // if we are DEMOING\n      // remove piano role from dom, hide or disable all buttons EXCEPT\n      // toggleOnNotePlay\n      if (!this.selecting) {\n        this.noteStampsTarget.style.visibility = 'hidden';\n        this.toggleSelectModeTarget.innerHTML = \"Select\";\n      } else {\n        this.noteStampsTarget.style.visibility = 'visible';\n        this.toggleSelectModeTarget.innerHTML = \"Play\";\n      }\n    } // when \n    //SAVE BUTTON \n\n  }, {\n    key: \"save\",\n    value: function save() {\n      var _this = this;\n\n      console.log(\"[MIDI_DEVICE_CONTROLLER] save(), about to save the project\");\n      return savePattern({\n        channel: this._channel,\n        pianoData: this.pianoData,\n        pianoTextData: this.pianoTextData,\n        midiEvents: this.midiEvents,\n        patternId: this._getPatternId(),\n        projectId: this._getProjectId()\n      }).then(function () {\n        console.log(\"[MIDI_DEVICE_CONTROLLER] save(), returning from network response\");\n        M.toast({\n          html: 'Pattern Saved'\n        }); // ? if the midi events are at the server, there is no reason for them to \n        // ? hang around in memory, clear the array in preparation for new recordings \n\n        _this._clearMidiEvents();\n      });\n    }\n  }, {\n    key: \"saveAndNavigate\",\n    value: function saveAndNavigate() {\n      var _this2 = this;\n\n      // console.log(this._settingsUrl)\n      this.save().then(function () {\n        // console.log(this._settingsUrl)\n        window.location.href = baseUrl + _this2._settingsUrl;\n      });\n    } //? submitting data to be converted into a video \n\n  }, {\n    key: \"generatePatternClip\",\n    value: function generatePatternClip() {\n      var _this3 = this;\n\n      // ! save before we tell controller to generate \n      this.save().then(function (e) {\n        _generatePatternClip({\n          patternId: _this3._getPatternId(),\n          projectId: _this3._getProjectId()\n        }).then(function () {});\n      });\n    } // there should be rwo messagenoteons? \n\n  }, {\n    key: \"onMessageNoteOn\",\n    value: function onMessageNoteOn(msg) {\n      console.log(\"onMessageNoteOn: \" + msg);\n      var number = msg.note.number;\n\n      this._play_note(number);\n\n      this._play_video(number);\n\n      this.onOnHighlightingRelevantOctaveButton(number); // this._playText(number);\n\n      this.lastNote = number;\n    }\n  }, {\n    key: \"onMessageNoteOnAudition\",\n    value: function onMessageNoteOnAudition(msg) {\n      this._play_video(msg.note.number);\n    }\n  }, {\n    key: \"onMessageNoteOff\",\n    value: function onMessageNoteOff(msg) {\n      var note = msg.note.number;\n\n      this._unplay_note(note);\n\n      this.onOffHighlightingRelevantOctaveButton(note);\n    } //? this method adds the starting timestamp (its the most precise way)\n    //? and begins adding new midi events to the collection  \n\n  }, {\n    key: \"onMessageStart\",\n    value: function onMessageStart(msg) {\n      this.playVideo();\n    }\n  }, {\n    key: \"onMessageStop\",\n    value: function onMessageStop() {\n      this.stopVideo();\n    }\n  }, {\n    key: \"playVideo\",\n    value: function playVideo() {\n      this._video.play();\n    }\n  }, {\n    key: \"stopVideo\",\n    value: function stopVideo() {\n      this._video.pause();\n    }\n  }, {\n    key: \"onPianoKeyClick\",\n    value: function onPianoKeyClick(event) {\n      var target = event.target;\n      var num = parseInt(target.id);\n\n      if (this._shouldSelectNote(target)) {\n        this._selectNote(event); // notoff last key before lighting up next \n\n\n        if (this.lastNote) {\n          this.onMessageNoteOff({\n            note: {\n              number: this.lastNote\n            }\n          });\n        }\n\n        this.onMessageNoteOn({\n          note: {\n            number: num\n          }\n        });\n        this.lastNote = number;\n      } else {\n        this._unselectNote(target);\n      }\n    }\n  }, {\n    key: \"updateSelectedNoteTime\",\n    value: function updateSelectedNoteTime(event) {\n      // ?exit immediately if we are playing midi, user is not allowed to timestamp drag in that state. \n      // if(this._playing) return \n      // if user is not actively seeking return, we are just playing midi notes and calling this because seeking is \n      // triggered when currentTime = is used \n      if (!this._isSeeking) return;\n      var filteredTime = toTheNearestThousandth(event.target.player.currentTime());\n\n      if (this._selectedKey) {\n        this._updateData({\n          time: filteredTime,\n          number: this._selectedKey.id\n        });\n\n        this._selectedKey.value = filteredTime;\n      }\n    } // returns the note number of piano key to push when user presses letter. \n\n  }, {\n    key: \"getVisibleNoteIndexFromKey\",\n    value: function getVisibleNoteIndexFromKey(letter) {\n      return {\n        a: 0,\n        w: 1,\n        s: 2,\n        e: 3,\n        d: 4,\n        f: 5,\n        t: 6,\n        g: 7,\n        y: 8,\n        h: 9,\n        u: 10,\n        j: 11\n      }[letter];\n    }\n  }, {\n    key: \"onDocumentKeyDown\",\n    value: function onDocumentKeyDown(e) {\n      if (e.code === \"Space\") {\n        if (this.videoPlaying) {\n          this.pauseVideo();\n        } else {\n          this.playVideo();\n        }\n\n        return;\n      }\n\n      if (this._keyCodeIsNumber(e.key)) {\n        this._changeChannel(e.key);\n\n        return;\n      }\n\n      if (e.metaKey && e.key === \"s\") {\n        e.preventDefault();\n        this.save();\n        return;\n      }\n\n      var index = this.getVisibleNoteIndexFromKey(e.key);\n\n      if (index != undefined) {\n        var noteNumber = this.visiblesNoteNumbersArray[index]; // TODO this is gross:\n\n        this.onMessageNoteOn({\n          note: {\n            number: noteNumber\n          }\n        });\n      }\n    }\n  }, {\n    key: \"onDocumentKeyUp\",\n    value: function onDocumentKeyUp(e) {\n      var index = this.getVisibleNoteIndexFromKey(e.key);\n\n      if (index != undefined) {\n        var noteNumber = this.visiblesNoteNumbersArray[index]; // TODO this is gross:\n\n        this.onMessageNoteOff({\n          note: {\n            number: noteNumber\n          }\n        });\n      }\n    }\n  }, {\n    key: \"randomizeOneNote\",\n    value: function randomizeOneNote() {\n      var selectedElement = document.getElementsByClassName(\"selected\");\n\n      if (selectedElement.length > 0) {\n        this._randomize(selectedElement[0].children[3]);\n      }\n    }\n  }, {\n    key: \"onFormKeyDown\",\n    value: function onFormKeyDown(e) {\n      e.preventDefault();\n\n      if (e.ctrlKey) {\n        switch (e.key) {\n          case \"]\":\n            this._nudgeTimeRight(e.target);\n\n            break;\n\n          case \"[\":\n            this._nudgeTimeLeft(e.target);\n\n            break;\n\n          case \"r\":\n            // hot key combo so we dont randomize input while typing form input \n            this._randomize(e.target);\n\n        }\n      }\n    } // **************************************************\n    // ! PRIVATE METHODS PRIVATE METHODS PRIVATE METHODS\n    // *************************************************\n\n  }, {\n    key: \"_clearMidiEvents\",\n    value: function _clearMidiEvents() {\n      this._midiEvents = [];\n    }\n  }, {\n    key: \"_updateData\",\n    value: function _updateData(_ref) {\n      var time = _ref.time,\n          number = _ref.number;\n      this.pianoData[number] = time;\n    }\n  }, {\n    key: \"_updateTextData\",\n    value: function _updateTextData(_ref2) {\n      var string = _ref2.string,\n          number = _ref2.number;\n      this.pianoTextData[number] = string;\n      console.log(this.pianoTextData);\n    } // TODO: i think the object may need data to be converted i.e. integers \n\n  }, {\n    key: \"_initializePianoData\",\n    value: function _initializePianoData() {\n      var noteStamps = JSON.parse(this.noteStampsTarget.getAttribute(\"note-stamps\"));\n\n      if (noteStamps) {\n        this.pianoData = noteStamps;\n      }\n    }\n  }, {\n    key: \"_initializeTextData\",\n    value: function _initializeTextData() {\n      var textStamps = JSON.parse(this.noteStampsTarget.getAttribute(\"text-stamps\"));\n\n      if (textStamps) {\n        this.pianoTextData = textStamps;\n      }\n    }\n  }, {\n    key: \"_addKeyDownChannelListener\",\n    value: function _addKeyDownChannelListener() {\n      window.addEventListener('keydown', this.onDocumentKeyDown.bind(this));\n      window.addEventListener('keyup', this.onDocumentKeyUp.bind(this));\n    }\n  }, {\n    key: \"_changeChannel\",\n    value: function _changeChannel(channel) {\n      this._channel = channel;\n\n      this._resetMidiListeners(parseInt(channel));\n    }\n  }, {\n    key: \"_keyCodeIsNumber\",\n    value: function _keyCodeIsNumber(code) {\n      return [1, 2, 3, 4, 5, 6, 7, 8, 9].includes(parseInt(code));\n    }\n  }, {\n    key: \"_numericalValue\",\n    value: function _numericalValue(str) {\n      return toTheNearestThousandth(parseFloat(str));\n    }\n  }, {\n    key: \"_nudgeTimeRight\",\n    value: function _nudgeTimeRight(element) {\n      var time = this._numericalValue(element.value);\n\n      time += NUDGE_AMOUNT;\n      time = toTheNearestThousandth(time);\n\n      this._updateData({\n        time: time,\n        number: element.id\n      });\n\n      element.value = time;\n    }\n  }, {\n    key: \"_nudgeTimeLeft\",\n    value: function _nudgeTimeLeft(element) {\n      var time = this._numericalValue(element.value);\n\n      var nextTime = toTheNearestThousandth(time - NUDGE_AMOUNT);\n      time = nextTime < 0 ? 0 : nextTime;\n\n      this._updateData({\n        time: time,\n        number: element.id\n      });\n\n      element.value = time;\n    }\n  }, {\n    key: \"_randomize\",\n    value: function _randomize(element) {\n      console.log(\"randomizing video, video length: \" + this._videoLength);\n      var randomValue = randoMize(this._videoLength);\n\n      this._updateData({\n        time: randomValue,\n        number: element.id\n      });\n\n      element.value = randomValue;\n    }\n  }, {\n    key: \"randomizeAll\",\n    value: function randomizeAll() {\n      for (var key = 0; key < 108; key++) {\n        //! WARNING this lasElementChild method shakily depends on the input being the last child so be careful when changing list items for keyboard.slim\n        var randTime = randoMize(this._videoLength);\n        this.piano[key].lastElementChild.value = randTime;\n\n        this._updateData({\n          time: randTime,\n          number: key\n        });\n      } // M.toast({ html: 'Randomized!' });\n\n    }\n  }, {\n    key: \"clearAll\",\n    value: function clearAll() {\n      var _this4 = this;\n\n      Object.keys(this.piano).forEach(function (pianoKeyKey) {\n        _this4.piano[pianoKeyKey].lastElementChild.value = \"\";\n      });\n      this.pianoData = {};\n      M.toast({\n        html: 'Midi Form Cleared'\n      });\n    }\n  }, {\n    key: \"_shouldSelectNote\",\n    value: function _shouldSelectNote(element) {\n      return this._selectedKey && this._selectedKey.id == element.id ? false : true;\n    }\n  }, {\n    key: \"_selectNote\",\n    value: function _selectNote(event) {\n      var _this5 = this;\n\n      this._selectedKey = event.target;\n\n      this._selectedKey.addEventListener('keydown', function (e) {\n        _this5.onFormKeyDown(e);\n      });\n    }\n  }, {\n    key: \"_unselectNote\",\n    value: function _unselectNote(element) {\n      this._deactivatePianoKey(element);\n\n      this._deletePianoKey();\n    } // !Midi Information \n    // ? need this to knwo if a note that is played is in the current visual range \n\n  }, {\n    key: \"onOnHighlightingRelevantOctaveButton\",\n    // make button green if the played notes are higher than the current octave\n    value: function onOnHighlightingRelevantOctaveButton(noteNumber) {\n      console.log(\"played note \".concat(this.notesLegend[noteNumber], \" current note: \").concat(this.currentMidiPosition));\n\n      if (this.notesLegend[noteNumber] < this.currentMidiPosition) {\n        //? removing black means default to teal\n        this.buttonMinusTarget.classList.remove(\"grey\");\n      } else if (this.notesLegend[noteNumber] > this.currentMidiPosition) {\n        //? removing grey means default to teal\n        this.buttonPlusTarget.classList.remove(\"grey\");\n      } else {\n        this.buttonPlusTarget.classList.add(\"grey\");\n      }\n    } // make button green if the played notes are lower than the current octave\n\n  }, {\n    key: \"onOffHighlightingRelevantOctaveButton\",\n    value: function onOffHighlightingRelevantOctaveButton(noteNumber) {\n      if (this.notesLegend[noteNumber] < this.currentMidiPosition) {\n        this.buttonMinusTarget.classList.add(\"grey\");\n      } else if (this.notesLegend[noteNumber] > this.currentMidiPosition) {\n        this.buttonPlusTarget.classList.add(\"grey\");\n      }\n    } // * Midi Information \n\n  }, {\n    key: \"_play_note\",\n    value: function _play_note(number) {\n      this._getPianoKey(number).classList.toggle(\"active\", true);\n    }\n  }, {\n    key: \"_unplay_note\",\n    value: function _unplay_note(number) {\n      this._getPianoKey(number).classList.toggle(\"active\", false);\n    }\n  }, {\n    key: \"_play_video\",\n    value: function _play_video(number) {\n      if (this.pianoData[number]) {\n        this._video.currentTime(this.pianoData[number]);\n      }\n    }\n  }, {\n    key: \"_activatePianoKey\",\n    value: function _activatePianoKey(element) {\n      // the button that changes time should light up to indicate activity\n      this.saveCurrentTimeTarget.classList.toggle(\"grey\", false); // teal by default \n      // add text button \n\n      this.addTextButtonTarget.classList.toggle(\"grey\", false);\n      this.randomizeOneTarget.classList.toggle(\"grey\", false);\n      element.parentElement.classList.add(\"selected\");\n    }\n  }, {\n    key: \"_deactivatePianoKey\",\n    value: function _deactivatePianoKey(element) {\n      this.randomizeOneTarget.classList.toggle(\"grey\", true);\n      element.parentElement.classList.remove(\"selected\");\n      element.parentElement.classList.remove(\"active\");\n    }\n  }, {\n    key: \"_deletePianoKey\",\n    value: function _deletePianoKey() {\n      // the button that changes time should go back to black\n      this.saveCurrentTimeTarget.classList.toggle(\"grey\", true); // add text button \n\n      this.addTextButtonTarget.classList.toggle(\"grey\", true);\n      this.selectedKey = null;\n    }\n  }, {\n    key: \"_getPianoKey\",\n    value: function _getPianoKey(number) {\n      return this._piano[number];\n    }\n  }, {\n    key: \"_add_key_to_piano\",\n    value: function _add_key_to_piano(_ref3) {\n      var noteNumber = _ref3.noteNumber,\n          pianoKey = _ref3.pianoKey;\n      this._piano[noteNumber] = pianoKey;\n    }\n  }, {\n    key: \"_get_note_number\",\n    value: function _get_note_number(keyElement) {\n      return parseInt(keyElement.getAttribute('midi-note-number'));\n    }\n  }, {\n    key: \"_observe_all_keys\",\n    value: function _observe_all_keys() {\n      var _this6 = this;\n\n      this.keyBoardKeyTargets.forEach(function (keyElement) {\n        _this6._add_key_to_piano({\n          pianoKey: keyElement,\n          noteNumber: _this6._get_note_number(keyElement)\n        });\n      });\n    } //////////////////////////////////////////\n    /// WEB MIDI SETUP:                     //\n    //////////////////////////////////////////\n    // basically requests access from browser, only runs if access is enabled \n\n  }, {\n    key: \"_enable_midi\",\n    value: function _enable_midi() {\n      var _this7 = this;\n\n      WebMidi.enable(function (error) {\n        error ? _this7._on_error(error) : _this7._onSuccess(_this7.getSavedChannel());\n      });\n    }\n  }, {\n    key: \"getSavedChannel\",\n    value: function getSavedChannel() {\n      return Number(this.channelTarget.getAttribute('device-channel'));\n    }\n  }, {\n    key: \"_on_error\",\n    value: function _on_error(error) {\n      alert(error);\n    }\n  }, {\n    key: \"_wipeListeners\",\n    value: function _wipeListeners() {\n      this._midiInput.removeListener('noteon');\n\n      this._midiInput.removeListener('noteoff');\n    }\n  }, {\n    key: \"_resetMidiListeners\",\n    value: function _resetMidiListeners(channel) {\n      this._wipeListeners();\n\n      this._onSuccess(channel);\n    }\n  }, {\n    key: \"_setPlaying\",\n    value: function _setPlaying() {\n      this.channelTarget.style.color = \"#f3ff85\";\n\n      this._hideControlBar();\n\n      this._playing = true;\n    }\n  }, {\n    key: \"_setStopping\",\n    value: function _setStopping() {\n      this.channelTarget.style.color = \"white\";\n\n      this._showControlBar();\n\n      this._playing = false;\n    }\n  }, {\n    key: \"_hideControlBar\",\n    value: function _hideControlBar() {\n      this._video.controlBar.hide();\n    }\n  }, {\n    key: \"_showControlBar\",\n    value: function _showControlBar() {\n      this._video.controlBar.show();\n    } // _setPlayAndStopListeners() {\n    //   this._midiInput.addListener('stop', 'all', this._setStopping.bind(this))\n    //   this._midiInput.addListener('start', 'all', this._setPlaying.bind(this))\n    // }\n\n  }, {\n    key: \"_onSuccess\",\n    value: function _onSuccess(channel) {\n      var _this8 = this;\n\n      console.log(\"setting listeners for channel: \" + channel); // if we are in time stamp select mode, set the appropriate handler, else, use the slimmed down video player\n\n      if (this.selecting) {\n        this._midiInput.addListener('noteon', channel, function (msg) {\n          return _this8.onMessageNoteOn(msg);\n        });\n\n        this._midiInput.addListener('noteoff', channel, function (msg) {\n          return _this8.onMessageNoteOff(msg);\n        });\n      } else {\n        this._midiInput.addListener('noteon', channel, function (msg) {\n          return _this8.onMessageNoteOnAudition(msg);\n        });\n      }\n\n      this._midiInput.addListener('start', \"all\", this.onMessageStart.bind(this));\n\n      this._midiInput.addListener('stop', \"all\", this.onMessageStop.bind(this));\n    }\n  }, {\n    key: \"_getPatternId\",\n    value: function _getPatternId() {\n      return this.patternIdTarget.getAttribute(\"pattern-id\");\n    }\n  }, {\n    key: \"_getProjectId\",\n    value: function _getProjectId() {\n      return this.projectIdTarget.getAttribute(\"project-id\");\n    } // **************************************************************\n    // ******************* GETTERS AND SETTERS **********************\n    // **************************************************************\n    // ? CHANNEL\n    // ? we get it from the document, it is save in the pattern \n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: \"playVideo\",\n    value: function playVideo() {\n      this._video.play();\n\n      this.videoPlaying = true;\n    }\n  }, {\n    key: \"pauseVideo\",\n    value: function pauseVideo() {\n      this._video.pause();\n\n      this.videoPlaying = false;\n    } //? set the currently selected input to the current video time \n    //? then unfocus the selcted note to\n    // !broken\n\n  }, {\n    key: \"saveCurrentTime\",\n    value: function saveCurrentTime() {\n      console.log(\"save current time\");\n\n      var time = this._video.currentTime();\n\n      this._selectedKey.value = time;\n\n      this._updateData({\n        time: time,\n        number: this._selectedKey.id\n      });\n\n      console.log(this.pianoData);\n      console.log(this.piano);\n      console.log(\"video video current time = \" + this._video.currentTime());\n\n      this._unselectNote();\n    }\n  }, {\n    key: \"addText\",\n    value: function addText() {\n      // if we havent selected a note, dont show modal\n      if (!this._selectedKey) return;\n      var currentKey = this.selectedKey.id;\n      var elems = document.querySelectorAll('.modal');\n      var instances = M.Modal.init(elems, {\n        title: \"whatever\"\n      }); //? if there is presaved data, show it in the input field \n\n      this.inputValueTarget.value = this.pianoTextData[currentKey] ? this.pianoTextData[currentKey] : \"\";\n      this.textModalTitleTarget.innerHTML = \"Text for midi: \".concat(currentKey);\n      instances[0].open();\n    }\n  }, {\n    key: \"onTextType\",\n    value: function onTextType(e) {\n      var number = this.selectedKey.id;\n      var string = e.target.value;\n\n      this._updateTextData({\n        number: number,\n        string: string\n      });\n    }\n  }, {\n    key: \"_playText\",\n    value: function _playText(num) {\n      if (this.pianoTextData[num]) {\n        var textToDisplay = this.pianoTextData[num];\n        this.noteTextTarget.innerHTML = textToDisplay;\n      } else {\n        this.noteTextTarget.innerHTML = \"\";\n      }\n    } // data action \n\n  }, {\n    key: \"clearText\",\n    value: function clearText() {\n      delete this.pianoTextData[this.selectedKey.id];\n    } // ? js centering of optional video text \n\n  }, {\n    key: \"positionTextForVideo\",\n    value: function positionTextForVideo() {// let textPosition = this.noteTextTarget;\n      // let video = document.getElementsByTagName('video')[0]\n      // // ! TODO THIS IS STILL NOT WORKED OUT YET\n      // var textPositionTop = video.offsetHeight / 2;\n      // var textPositionLeft = (video.offsetWidth / 2 - textPosition.width);\n      // textPosition.style.left = textPositionLeft + 'px';\n      // textPosition.style.top = textPositionTop + 'px';\n    }\n  }, {\n    key: \"positionTextOnWindowResize\",\n    value: function positionTextOnWindowResize() {\n      window.addEventListener('resize', this.positionTextForVideo.bind(this));\n    }\n  }, {\n    key: \"visiblesNoteNumbersArray\",\n    get: function get() {\n      return JSON.parse(this.noteStampsTarget.getAttribute(\"data-visible-note-numbers-array\"));\n    }\n  }, {\n    key: \"currentMidiPosition\",\n    get: function get() {\n      return parseInt(this.noteStampsTarget.getAttribute(\"data-patterns--keyboard-position\"));\n    }\n  }, {\n    key: \"notesLegend\",\n    get: function get() {\n      return JSON.parse(this.noteStampsTarget.getAttribute(\"data-notes-in-which-octave-identifier\"));\n    }\n  }, {\n    key: \"_channel\",\n    get: function get() {\n      return parseInt(this.channelTarget.getAttribute('device-channel'));\n    },\n    set: function set(channel) {\n      this.channelTarget.innerHTML = channel;\n      this.channelTarget.setAttribute('device-channel', channel);\n    } ///////////////////////////\n\n  }, {\n    key: \"_midiEvents\",\n    get: function get() {\n      return this.midiEvents;\n    },\n    set: function set(events) {\n      this.midiEvents = events;\n    } ///////////////////////////\n\n  }, {\n    key: \"_midiInput\",\n    get: function get() {\n      return WebMidi.inputs[0];\n    }\n  }, {\n    key: \"_midiOutput\",\n    get: function get() {\n      return WebMidi.outputs[0];\n    }\n  }, {\n    key: \"_piano\",\n    get: function get() {\n      return this.piano;\n    } // ? PLAYING we use this to light up channel, to notify forms to ignore playhead's value \n    // ? and probably a multitude of other things as new requirements emerge. \n    /////////////////////////\n\n  }, {\n    key: \"_playing\",\n    get: function get() {\n      return this.playing;\n    },\n    set: function set(playing) {\n      this.playing = playing;\n    } ////////////////////////////////////////////////////////////////////////\n    // ? SELECTED KEY \n    // ? get the key (form input) that we need to change the time on \n\n  }, {\n    key: \"_selectedKey\",\n    get: function get() {\n      return this.selectedKey;\n    } // ? set the key we will be performing for input changes on \n    ,\n    set: function set(element) {\n      if (this.selectedKey) {\n        this._deactivatePianoKey(this.selectedKey);\n      }\n\n      this._activatePianoKey(element);\n\n      this.selectedKey = element;\n    } //////////////////////////////////////////////////////\n    // ? which url to navigate to update pattern \n\n  }, {\n    key: \"_settingsUrl\",\n    get: function get() {\n      return this.settingsTarget.getAttribute(\"nav-url\");\n    } // ? pre-calculated (on server side) total clock signals before a record session ends \n\n  }, {\n    key: \"_totaClockSignals\",\n    get: function get() {\n      return parseInt(this.recordButtonTarget.getAttribute(\"total-clock-signals\"));\n    } // ? return the video element \n\n  }, {\n    key: \"_video\",\n    get: function get() {\n      return this.video;\n    } // ? used to calculate a random timestamp within video length range \n\n  }, {\n    key: \"_videoLength\",\n    get: function get() {\n      return this._video.duration();\n    }\n  }]);\n\n  return _default;\n}(Controller);\n\n_default.targets = [\"keyBoardKey\", \"video\", \"channel\", \"patternId\", \"projectId\", \"settings\", \"recordButton\", \"noteStamps\", \"buttonMinus\", \"buttonPlus\", \"saveCurrentTime\", \"addTextButton\", \"textModalTitle\", \"noteText\", \"inputValue\", \"randomizeOne\", \"toggleSelectMode\", \"randomizeAll\", \"saveButton\", \"clearAll\"];\nexport { _default as default };","map":{"version":3,"sources":["/Users/zack/andrWert43h/app/javascript/controllers/patterns/midi_device_controller.js"],"names":["Controller","WebMidi","videojs","toTheNearestThousandth","randoMize","NUDGE_AMOUNT","baseUrl","savePattern","generatePatternClip","piano","pianoData","pianoTextData","recordingSessionOpen","recording","midiEvents","startingTime","clockSignalsPassedSinceRecordStart","video","videoTarget","id","selectedKey","_observe_all_keys","_enable_midi","saveAndNavigate","bind","_addKeyDownChannelListener","_initializePianoData","isSeeking","positionTextForVideo","positionTextOnWindowResize","_initializeTextData","selecting","videoPlaying","lastNote","bot","updateUIFromModeChange","_resetMidiListeners","noteStampsTarget","style","visibility","toggleSelectModeTarget","innerHTML","console","log","channel","_channel","patternId","_getPatternId","projectId","_getProjectId","then","M","toast","html","_clearMidiEvents","save","window","location","href","_settingsUrl","e","msg","number","note","_play_note","_play_video","onOnHighlightingRelevantOctaveButton","_unplay_note","onOffHighlightingRelevantOctaveButton","playVideo","stopVideo","_video","play","pause","event","target","num","parseInt","_shouldSelectNote","_selectNote","onMessageNoteOff","onMessageNoteOn","_unselectNote","_isSeeking","filteredTime","player","currentTime","_selectedKey","_updateData","time","value","letter","a","w","s","d","f","t","g","y","h","u","j","code","pauseVideo","_keyCodeIsNumber","key","_changeChannel","metaKey","preventDefault","index","getVisibleNoteIndexFromKey","undefined","noteNumber","visiblesNoteNumbersArray","selectedElement","document","getElementsByClassName","length","_randomize","children","ctrlKey","_nudgeTimeRight","_nudgeTimeLeft","_midiEvents","string","noteStamps","JSON","parse","getAttribute","textStamps","addEventListener","onDocumentKeyDown","onDocumentKeyUp","includes","str","parseFloat","element","_numericalValue","nextTime","_videoLength","randomValue","randTime","lastElementChild","Object","keys","forEach","pianoKeyKey","onFormKeyDown","_deactivatePianoKey","_deletePianoKey","notesLegend","currentMidiPosition","buttonMinusTarget","classList","remove","buttonPlusTarget","add","_getPianoKey","toggle","saveCurrentTimeTarget","addTextButtonTarget","randomizeOneTarget","parentElement","_piano","pianoKey","keyElement","keyBoardKeyTargets","_add_key_to_piano","_get_note_number","enable","error","_on_error","_onSuccess","getSavedChannel","Number","channelTarget","alert","_midiInput","removeListener","_wipeListeners","color","_hideControlBar","_playing","_showControlBar","controlBar","hide","show","addListener","onMessageNoteOnAudition","onMessageStart","onMessageStop","patternIdTarget","projectIdTarget","currentKey","elems","querySelectorAll","instances","Modal","init","title","inputValueTarget","textModalTitleTarget","open","_updateTextData","textToDisplay","noteTextTarget","setAttribute","events","inputs","outputs","playing","_activatePianoKey","settingsTarget","recordButtonTarget","duration","targets"],"mappings":"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","sourcesContent":["import { Controller } from \"stimulus\";\nimport WebMidi from 'webmidi';\nimport videojs from '../../helpers/video.js';\nimport { toTheNearestThousandth, randoMize } from '../../helpers/math'\nimport { NUDGE_AMOUNT, baseUrl } from '../../helpers/constants'\nimport { savePattern, generatePatternClip } from '../../helpers/network'\n\nexport default class extends Controller {\n\n  static targets = [\n    \"keyBoardKey\",\n    \"video\",\n    \"channel\",\n    \"patternId\",\n    \"projectId\",\n    \"settings\",\n    \"recordButton\",\n    \"noteStamps\",\n    \"buttonMinus\",\n    \"buttonPlus\",\n    \"saveCurrentTime\",\n    \"addTextButton\",\n    \"textModalTitle\",\n    \"noteText\",\n    \"inputValue\",\n    \"randomizeOne\",\n    \"toggleSelectMode\",\n    \"randomizeAll\",\n    \"saveButton\",\n    \"clearAll\",\n  ];\n\n  connect() {\n    this.piano = {};\n    this.pianoData = {};\n    this.pianoTextData = {};\n    this.recordingSessionOpen = false;\n    this.recording = false;\n    this.midiEvents = [];\n    this.startingTime = null;\n    this.clockSignalsPassedSinceRecordStart = 0;\n    this.video = videojs(this.videoTarget.id);\n    this.selectedKey = null;\n    this._observe_all_keys();\n    this._enable_midi();\n    this.saveAndNavigate = this.saveAndNavigate.bind(this);\n    this._addKeyDownChannelListener();\n    this._initializePianoData();\n    //everytime a new notes comes in we will add it \n    this.isSeeking = false;\n    //? text styling\n    this.positionTextForVideo();\n    this.positionTextOnWindowResize();\n    this._initializeTextData();\n    // the current 'mode' either, selecting or demoing midi \n    this.selecting = true;\n    this.videoPlaying = false;\n    this.lastNote = null;\n  }\n\n  updateCurrentNoteTextPosition() {\n    this.pianoTextData.bot\n  }\n  // onNote\n\n  toggleSelectMode() {\n    this.selecting = !this.selecting;\n    this.updateUIFromModeChange();\n    this._resetMidiListeners();\n    // reset midi play listener\n  }\n\n  updateUIFromModeChange() {\n    // if we are DEMOING\n    // remove piano role from dom, hide or disable all buttons EXCEPT\n    // toggleOnNotePlay\n    if (!this.selecting) {\n      this.noteStampsTarget.style.visibility = 'hidden';\n      this.toggleSelectModeTarget.innerHTML = \"Select\";\n    } else {\n      this.noteStampsTarget.style.visibility = 'visible';\n      this.toggleSelectModeTarget.innerHTML = \"Play\"\n    }\n  }\n\n  // when \n\n  //SAVE BUTTON \n  save() {\n    console.log(`[MIDI_DEVICE_CONTROLLER] save(), about to save the project`);\n    return savePattern({ channel: this._channel, pianoData: this.pianoData, pianoTextData: this.pianoTextData, midiEvents: this.midiEvents, patternId: this._getPatternId(), projectId: this._getProjectId() })\n      .then(() => {\n        console.log(`[MIDI_DEVICE_CONTROLLER] save(), returning from network response`)\n        M.toast({ html: 'Pattern Saved' })\n        // ? if the midi events are at the server, there is no reason for them to \n        // ? hang around in memory, clear the array in preparation for new recordings \n        this._clearMidiEvents()\n      });\n  }\n\n  saveAndNavigate() {\n    // console.log(this._settingsUrl)\n    this.save().then(() => {\n      // console.log(this._settingsUrl)\n      window.location.href = baseUrl + this._settingsUrl\n    });\n  }\n\n  //? submitting data to be converted into a video \n  generatePatternClip() {\n    // ! save before we tell controller to generate \n    this.save().then((e) => {\n      generatePatternClip({ patternId: this._getPatternId(), projectId: this._getProjectId() }).then(() => {\n      })\n    })\n  }\n  // there should be rwo messagenoteons? \n  onMessageNoteOn(msg) {\n    console.log(\"onMessageNoteOn: \" + msg);\n    const number = msg.note.number;\n    this._play_note(number);\n    this._play_video(number);\n    this.onOnHighlightingRelevantOctaveButton(number);\n    // this._playText(number);\n    this.lastNote = number;\n  }\n\n  onMessageNoteOnAudition(msg) {\n    this._play_video(msg.note.number);\n  }\n\n  onMessageNoteOff(msg) {\n    let note = msg.note.number;\n    this._unplay_note(note);\n    this.onOffHighlightingRelevantOctaveButton(note);\n  }\n\n  //? this method adds the starting timestamp (its the most precise way)\n  //? and begins adding new midi events to the collection  \n  onMessageStart(msg) {\n    this.playVideo();\n  }\n\n  onMessageStop() {\n    this.stopVideo();\n  }\n\n  playVideo() {\n    this._video.play();\n  }\n\n  stopVideo() {\n    this._video.pause();\n  }\n\n  onPianoKeyClick(event) {\n    let target = event.target;\n    let num = parseInt(target.id);\n    if (this._shouldSelectNote(target)) {\n      this._selectNote(event);\n      // notoff last key before lighting up next \n      if (this.lastNote) {\n        this.onMessageNoteOff({ note: { number: this.lastNote } });\n      }\n      this.onMessageNoteOn({ note: { number: num } });\n      this.lastNote = number;\n    } else {\n      this._unselectNote(target);\n    }\n\n  }\n\n  updateSelectedNoteTime(event) {\n    // ?exit immediately if we are playing midi, user is not allowed to timestamp drag in that state. \n    // if(this._playing) return \n    // if user is not actively seeking return, we are just playing midi notes and calling this because seeking is \n    // triggered when currentTime = is used \n    if (!this._isSeeking) return\n    let filteredTime = toTheNearestThousandth(event.target.player.currentTime())\n    if (this._selectedKey) {\n\n      this._updateData({ time: filteredTime, number: this._selectedKey.id })\n      this._selectedKey.value = filteredTime\n    }\n  }\n\n  // returns the note number of piano key to push when user presses letter. \n  getVisibleNoteIndexFromKey(letter) {\n    return {\n      a: 0,\n      w: 1,\n      s: 2,\n      e: 3,\n      d: 4,\n      f: 5,\n      t: 6,\n      g: 7,\n      y: 8,\n      h: 9,\n      u: 10,\n      j: 11,\n    }[letter]\n  }\n\n  onDocumentKeyDown(e) {\n    if (e.code === \"Space\") {\n      if (this.videoPlaying) {\n        this.pauseVideo();\n      } else {\n        this.playVideo()\n      }\n      return;\n    }\n    if (this._keyCodeIsNumber(e.key)) {\n      this._changeChannel(e.key);\n      return\n    }\n    if (e.metaKey && e.key === \"s\") {\n      e.preventDefault();\n      this.save();\n      return;\n    }\n    let index = this.getVisibleNoteIndexFromKey(e.key);\n    if (index != undefined) {\n      let noteNumber = this.visiblesNoteNumbersArray[index]\n      // TODO this is gross:\n      this.onMessageNoteOn({ note: { number: noteNumber } });\n    }\n  }\n\n  onDocumentKeyUp(e) {\n    let index = this.getVisibleNoteIndexFromKey(e.key);\n    if (index != undefined) {\n      let noteNumber = this.visiblesNoteNumbersArray[index]\n      // TODO this is gross:\n      this.onMessageNoteOff({ note: { number: noteNumber } });\n    }\n  }\n\n  get visiblesNoteNumbersArray() {\n    return JSON.parse(this.noteStampsTarget.getAttribute(\"data-visible-note-numbers-array\"));\n  }\n\n  randomizeOneNote() {\n    let selectedElement = document.getElementsByClassName(\"selected\")\n    if (selectedElement.length > 0) {\n      this._randomize(selectedElement[0].children[3]);\n    }\n  }\n\n  onFormKeyDown(e) {\n    e.preventDefault()\n    if (e.ctrlKey) {\n      switch (e.key) {\n        case \"]\":\n          this._nudgeTimeRight(e.target)\n          break\n        case \"[\":\n          this._nudgeTimeLeft(e.target)\n          break\n        case \"r\":\n          // hot key combo so we dont randomize input while typing form input \n          this._randomize(e.target)\n      }\n    }\n  }\n\n\n  // **************************************************\n  // ! PRIVATE METHODS PRIVATE METHODS PRIVATE METHODS\n  // *************************************************\n\n  _clearMidiEvents() {\n    this._midiEvents = []\n  }\n\n  _updateData({ time, number }) {\n    this.pianoData[number] = time\n  }\n\n  _updateTextData({ string, number }) {\n    this.pianoTextData[number] = string;\n    console.log(this.pianoTextData)\n  }\n\n  // TODO: i think the object may need data to be converted i.e. integers \n  _initializePianoData() {\n    let noteStamps = JSON.parse(this.noteStampsTarget.getAttribute(\"note-stamps\"))\n    if (noteStamps) {\n      this.pianoData = noteStamps\n    }\n  }\n\n  _initializeTextData() {\n    let textStamps = JSON.parse(this.noteStampsTarget.getAttribute(\"text-stamps\"))\n    if (textStamps) {\n      this.pianoTextData = textStamps\n    }\n  }\n\n  _addKeyDownChannelListener() {\n    window.addEventListener('keydown', this.onDocumentKeyDown.bind(this));\n    window.addEventListener('keyup', this.onDocumentKeyUp.bind(this));\n  }\n\n  _changeChannel(channel) {\n    this._channel = channel\n    this._resetMidiListeners(parseInt(channel))\n  }\n\n  _keyCodeIsNumber(code) {\n    return [1, 2, 3, 4, 5, 6, 7, 8, 9].includes(parseInt(code))\n  }\n\n  _numericalValue(str) {\n    return toTheNearestThousandth(parseFloat(str))\n  }\n\n  _nudgeTimeRight(element) {\n    let time = this._numericalValue(element.value)\n    time += NUDGE_AMOUNT\n    time = toTheNearestThousandth(time)\n    this._updateData({ time: time, number: element.id })\n    element.value = time\n  }\n\n  _nudgeTimeLeft(element) {\n    let time = this._numericalValue(element.value)\n    let nextTime = toTheNearestThousandth(time - NUDGE_AMOUNT)\n    time = nextTime < 0 ? 0 : nextTime\n    this._updateData({ time: time, number: element.id })\n    element.value = time\n  }\n\n  _randomize(element) {\n    console.log(\"randomizing video, video length: \" + this._videoLength);\n    let randomValue = randoMize(this._videoLength)\n    this._updateData({ time: randomValue, number: element.id })\n    element.value = randomValue\n  }\n\n  randomizeAll() {\n    for (let key = 0; key < 108; key++) {\n      //! WARNING this lasElementChild method shakily depends on the input being the last child so be careful when changing list items for keyboard.slim\n      const randTime = randoMize(this._videoLength);\n      this.piano[key].lastElementChild.value = randTime;\n      this._updateData({ time: randTime, number: key });\n    }\n    // M.toast({ html: 'Randomized!' });\n  }\n\n  clearAll() {\n    Object.keys(this.piano).forEach(pianoKeyKey => {\n      this.piano[pianoKeyKey].lastElementChild.value = \"\";\n    });\n    this.pianoData = {};\n    M.toast({ html: 'Midi Form Cleared' });\n  }\n\n  _shouldSelectNote(element) {\n    return this._selectedKey && this._selectedKey.id == element.id ? false : true\n  }\n\n  _selectNote(event) {\n    this._selectedKey = event.target\n    this._selectedKey.addEventListener('keydown', (e) => { this.onFormKeyDown(e) })\n  }\n\n  _unselectNote(element) {\n    this._deactivatePianoKey(element)\n    this._deletePianoKey()\n  }\n  // !Midi Information \n  // ? need this to knwo if a note that is played is in the current visual range \n  get currentMidiPosition() {\n    return parseInt(this.noteStampsTarget.getAttribute(\"data-patterns--keyboard-position\"));\n  }\n\n  get notesLegend() {\n    return JSON.parse(this.noteStampsTarget.getAttribute(\"data-notes-in-which-octave-identifier\"));\n  }\n\n  // make button green if the played notes are higher than the current octave\n  onOnHighlightingRelevantOctaveButton(noteNumber) {\n    console.log(`played note ${this.notesLegend[noteNumber]} current note: ${this.currentMidiPosition}`)\n    if (this.notesLegend[noteNumber] < this.currentMidiPosition) {\n      //? removing black means default to teal\n      this.buttonMinusTarget.classList.remove(\"grey\");\n    } else if (this.notesLegend[noteNumber] > this.currentMidiPosition) {\n      //? removing grey means default to teal\n      this.buttonPlusTarget.classList.remove(\"grey\");\n    } else {\n      this.buttonPlusTarget.classList.add(\"grey\");\n    }\n  }\n\n  // make button green if the played notes are lower than the current octave\n  onOffHighlightingRelevantOctaveButton(noteNumber) {\n    if (this.notesLegend[noteNumber] < this.currentMidiPosition) {\n      this.buttonMinusTarget.classList.add(\"grey\");\n    } else if (this.notesLegend[noteNumber] > this.currentMidiPosition) {\n      this.buttonPlusTarget.classList.add(\"grey\");\n    }\n  }\n\n  // * Midi Information \n\n  _play_note(number) {\n    this._getPianoKey(number).classList.toggle(\"active\", true)\n  }\n\n  _unplay_note(number) {\n    this._getPianoKey(number).classList.toggle(\"active\", false)\n  }\n\n  _play_video(number) {\n    if (this.pianoData[number]) {\n      this._video.currentTime(this.pianoData[number])\n    }\n  }\n\n  _activatePianoKey(element) {\n    // the button that changes time should light up to indicate activity\n    this.saveCurrentTimeTarget.classList.toggle(\"grey\", false); // teal by default \n    // add text button \n    this.addTextButtonTarget.classList.toggle(\"grey\", false);\n\n    this.randomizeOneTarget.classList.toggle(\"grey\", false);\n\n    element.parentElement.classList.add(\"selected\");\n  }\n\n  _deactivatePianoKey(element) {\n    this.randomizeOneTarget.classList.toggle(\"grey\", true);\n    element.parentElement.classList.remove(\"selected\");\n    element.parentElement.classList.remove(\"active\");\n  }\n\n  _deletePianoKey() {\n    // the button that changes time should go back to black\n    this.saveCurrentTimeTarget.classList.toggle(\"grey\", true);\n    // add text button \n    this.addTextButtonTarget.classList.toggle(\"grey\", true);\n    this.selectedKey = null\n  }\n\n  _getPianoKey(number) {\n    return this._piano[number]\n  }\n\n  _add_key_to_piano({ noteNumber, pianoKey }) {\n    this._piano[noteNumber] = pianoKey\n  }\n\n  _get_note_number(keyElement) {\n    return parseInt(keyElement.getAttribute('midi-note-number'))\n  }\n\n  _observe_all_keys() {\n    this.keyBoardKeyTargets.forEach(keyElement => {\n      this._add_key_to_piano({ pianoKey: keyElement, noteNumber: this._get_note_number(keyElement) })\n    })\n  }\n\n  //////////////////////////////////////////\n  /// WEB MIDI SETUP:                     //\n  //////////////////////////////////////////\n  // basically requests access from browser, only runs if access is enabled \n  _enable_midi() {\n    WebMidi.enable(error => { error ? this._on_error(error) : this._onSuccess(this.getSavedChannel()) })\n  }\n\n  getSavedChannel() {\n    return Number(this.channelTarget.getAttribute('device-channel'));\n  }\n\n  _on_error(error) {\n    alert(error);\n  }\n\n  _wipeListeners() {\n    this._midiInput.removeListener('noteon')\n    this._midiInput.removeListener('noteoff')\n  }\n\n  _resetMidiListeners(channel) {\n    this._wipeListeners()\n    this._onSuccess(channel)\n  }\n\n  _setPlaying() {\n    this.channelTarget.style.color = \"#f3ff85\"\n    this._hideControlBar()\n    this._playing = true\n  }\n\n  _setStopping() {\n    this.channelTarget.style.color = \"white\"\n    this._showControlBar()\n    this._playing = false\n  }\n\n  _hideControlBar() {\n    this._video.controlBar.hide()\n  }\n\n  _showControlBar() {\n    this._video.controlBar.show()\n  }\n\n  // _setPlayAndStopListeners() {\n  //   this._midiInput.addListener('stop', 'all', this._setStopping.bind(this))\n  //   this._midiInput.addListener('start', 'all', this._setPlaying.bind(this))\n  // }\n\n  _onSuccess(channel) {\n    console.log(\"setting listeners for channel: \" + channel);\n    // if we are in time stamp select mode, set the appropriate handler, else, use the slimmed down video player\n    if (this.selecting) {\n      this._midiInput.addListener('noteon', channel, msg => this.onMessageNoteOn(msg));\n      this._midiInput.addListener('noteoff', channel, msg => this.onMessageNoteOff(msg));\n    } else {\n      this._midiInput.addListener('noteon', channel, msg => this.onMessageNoteOnAudition(msg));\n\n    }\n    this._midiInput.addListener('start', \"all\", this.onMessageStart.bind(this))\n    this._midiInput.addListener('stop', \"all\", this.onMessageStop.bind(this))\n  }\n\n  _getPatternId() {\n    return this.patternIdTarget.getAttribute(\"pattern-id\")\n  }\n\n  _getProjectId() {\n    return this.projectIdTarget.getAttribute(\"project-id\")\n  }\n\n\n  // **************************************************************\n  // ******************* GETTERS AND SETTERS **********************\n  // **************************************************************\n\n  // ? CHANNEL\n  // ? we get it from the document, it is save in the pattern \n  ///////////////////////////////////////////////////////////////////\n  get _channel() {\n    return parseInt(this.channelTarget.getAttribute('device-channel'))\n  }\n\n  set _channel(channel) {\n    this.channelTarget.innerHTML = channel\n    this.channelTarget.setAttribute('device-channel', channel)\n  }\n  ///////////////////////////\n  get _midiEvents() {\n    return this.midiEvents\n  }\n\n  set _midiEvents(events) {\n    this.midiEvents = events\n  }\n  ///////////////////////////\n  get _midiInput() {\n    return WebMidi.inputs[0]\n  }\n\n  get _midiOutput() {\n    return WebMidi.outputs[0]\n  }\n\n  get _piano() {\n    return this.piano\n  }\n\n  // ? PLAYING we use this to light up channel, to notify forms to ignore playhead's value \n  // ? and probably a multitude of other things as new requirements emerge. \n  /////////////////////////\n  get _playing() {\n    return this.playing\n  }\n\n  set _playing(playing) {\n    this.playing = playing\n  }\n\n  ////////////////////////////////////////////////////////////////////////\n  // ? SELECTED KEY \n  // ? get the key (form input) that we need to change the time on \n  get _selectedKey() {\n    return this.selectedKey\n  }\n  // ? set the key we will be performing for input changes on \n  set _selectedKey(element) {\n    if (this.selectedKey) {\n      this._deactivatePianoKey(this.selectedKey)\n    }\n    this._activatePianoKey(element)\n    this.selectedKey = element\n  }\n  //////////////////////////////////////////////////////\n  // ? which url to navigate to update pattern \n  get _settingsUrl() {\n    return this.settingsTarget.getAttribute(\"nav-url\")\n  }\n\n  // ? pre-calculated (on server side) total clock signals before a record session ends \n  get _totaClockSignals() {\n    return parseInt(this.recordButtonTarget.getAttribute(\"total-clock-signals\"))\n  }\n\n  // ? return the video element \n  get _video() {\n    return this.video\n  }\n\n  // ? used to calculate a random timestamp within video length range \n  get _videoLength() {\n    return this._video.duration();\n  }\n\n  playVideo() {\n    this._video.play();\n    this.videoPlaying = true;\n  }\n\n  pauseVideo() {\n    this._video.pause();\n    this.videoPlaying = false;\n  }\n\n  //? set the currently selected input to the current video time \n  //? then unfocus the selcted note to\n  // !broken\n  saveCurrentTime() {\n    console.log(\"save current time\");\n    let time = this._video.currentTime();\n    this._selectedKey.value = time;\n    this._updateData({ time: time, number: this._selectedKey.id });\n    console.log(this.pianoData);\n    console.log(this.piano);\n    console.log(\"video video current time = \" + this._video.currentTime())\n    this._unselectNote();\n  }\n\n  addText() {\n    // if we havent selected a note, dont show modal\n    if (!this._selectedKey) return\n    const currentKey = this.selectedKey.id;\n    const elems = document.querySelectorAll('.modal');\n    const instances = M.Modal.init(elems, { title: \"whatever\" });\n    //? if there is presaved data, show it in the input field \n    this.inputValueTarget.value = this.pianoTextData[currentKey] ? this.pianoTextData[currentKey] : \"\"\n    this.textModalTitleTarget.innerHTML = `Text for midi: ${currentKey}`\n    instances[0].open();\n  }\n\n  onTextType(e) {\n    let number = this.selectedKey.id;\n    let string = e.target.value;\n    this._updateTextData({ number: number, string: string })\n  }\n\n  _playText(num) {\n    if (this.pianoTextData[num]) {\n      let textToDisplay = this.pianoTextData[num];\n      this.noteTextTarget.innerHTML = textToDisplay;\n    } else {\n      this.noteTextTarget.innerHTML = \"\";\n    }\n  }\n  // data action \n  clearText() {\n    delete this.pianoTextData[this.selectedKey.id]\n  }\n\n  // ? js centering of optional video text \n  positionTextForVideo() {\n    // let textPosition = this.noteTextTarget;\n    // let video = document.getElementsByTagName('video')[0]\n    // // ! TODO THIS IS STILL NOT WORKED OUT YET\n    // var textPositionTop = video.offsetHeight / 2;\n    // var textPositionLeft = (video.offsetWidth / 2 - textPosition.width);\n    // textPosition.style.left = textPositionLeft + 'px';\n    // textPosition.style.top = textPositionTop + 'px';\n  }\n\n  positionTextOnWindowResize() {\n    window.addEventListener('resize', this.positionTextForVideo.bind(this));\n  }\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}