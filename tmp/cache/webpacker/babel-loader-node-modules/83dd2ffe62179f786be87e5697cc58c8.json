{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar midi_file_1 = require(\"midi-file\");\n\nvar Encode_1 = require(\"./Encode\");\n\nvar Header_1 = require(\"./Header\");\n\nvar Track_1 = require(\"./Track\");\n/**\n * The main midi parsing class\n */\n\n\nvar Midi =\n/** @class */\nfunction () {\n  /**\n   * Parse the midi data\n   */\n  function Midi(midiArray) {\n    var _this = this; // parse the midi data if there is any\n\n\n    var midiData = null;\n\n    if (midiArray) {\n      if (midiArray instanceof ArrayBuffer) {\n        midiArray = new Uint8Array(midiArray);\n      }\n\n      midiData = midi_file_1.parseMidi(midiArray); // add the absolute times to each of the tracks\n\n      midiData.tracks.forEach(function (track) {\n        var currentTicks = 0;\n        track.forEach(function (event) {\n          currentTicks += event.deltaTime;\n          event.absoluteTime = currentTicks;\n        });\n      }); // ensure at most one instrument per track\n\n      midiData.tracks = splitTracks(midiData.tracks);\n    }\n\n    this.header = new Header_1.Header(midiData);\n    this.tracks = []; // parse the midi data\n\n    if (midiArray) {\n      // format 0, everything is on the same track\n      this.tracks = midiData.tracks.map(function (trackData) {\n        return new Track_1.Track(trackData, _this.header);\n      }); // if it's format 1 and there are no notes on the first track, remove it\n\n      if (midiData.header.format === 1 && this.tracks[0].duration === 0) {\n        this.tracks.shift();\n      }\n    }\n  }\n  /**\n   * Download and parse the MIDI file. Returns a promise\n   * which resolves to the generated midi file\n   * @param url The url to fetch\n   */\n\n\n  Midi.fromUrl = function (url) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, arrayBuffer;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , fetch(url)];\n\n          case 1:\n            response = _a.sent();\n            if (!response.ok) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , response.arrayBuffer()];\n\n          case 2:\n            arrayBuffer = _a.sent();\n            return [2\n            /*return*/\n            , new Midi(arrayBuffer)];\n\n          case 3:\n            throw new Error(\"could not load \" + url);\n        }\n      });\n    });\n  };\n\n  Object.defineProperty(Midi.prototype, \"name\", {\n    /**\n     * The name of the midi file, taken from the first track\n     */\n    get: function get() {\n      return this.header.name;\n    },\n    set: function set(n) {\n      this.header.name = n;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Midi.prototype, \"duration\", {\n    /**\n     * The total length of the file in seconds\n     */\n    get: function get() {\n      // get the max of the last note of all the tracks\n      var durations = this.tracks.map(function (t) {\n        return t.duration;\n      });\n      return Math.max.apply(Math, durations);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Midi.prototype, \"durationTicks\", {\n    /**\n     * The total length of the file in ticks\n     */\n    get: function get() {\n      // get the max of the last note of all the tracks\n      var durationTicks = this.tracks.map(function (t) {\n        return t.durationTicks;\n      });\n      return Math.max.apply(Math, durationTicks);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Add a track to the midi file\n   */\n\n  Midi.prototype.addTrack = function () {\n    var track = new Track_1.Track(undefined, this.header);\n    this.tracks.push(track);\n    return track;\n  };\n  /**\n   * Encode the midi as a Uint8Array.\n   */\n\n\n  Midi.prototype.toArray = function () {\n    return Encode_1.encode(this);\n  };\n  /**\n   * Convert the midi object to JSON.\n   */\n\n\n  Midi.prototype.toJSON = function () {\n    return {\n      header: this.header.toJSON(),\n      tracks: this.tracks.map(function (track) {\n        return track.toJSON();\n      })\n    };\n  };\n  /**\n   * Parse a JSON representation of the object. Will overwrite the current\n   * tracks and header.\n   */\n\n\n  Midi.prototype.fromJSON = function (json) {\n    var _this = this;\n\n    this.header = new Header_1.Header();\n    this.header.fromJSON(json.header);\n    this.tracks = json.tracks.map(function (trackJSON) {\n      var track = new Track_1.Track(undefined, _this.header);\n      track.fromJSON(trackJSON);\n      return track;\n    });\n  };\n  /**\n   * Clone the entire object midi object\n   */\n\n\n  Midi.prototype.clone = function () {\n    var midi = new Midi();\n    midi.fromJSON(this.toJSON());\n    return midi;\n  };\n\n  return Midi;\n}();\n\nexports.Midi = Midi;\n\nvar Track_2 = require(\"./Track\");\n\nexports.Track = Track_2.Track;\n\nvar Header_2 = require(\"./Header\");\n\nexports.Header = Header_2.Header;\n/**\n * Given a list of MIDI tracks, make sure that each channel corresponds to at\n * most one channel and at most one instrument. This means splitting up tracks\n * that contain more than one channel or instrument.\n */\n\nfunction splitTracks(tracks) {\n  var newTracks = [];\n\n  for (var i = 0; i < tracks.length; i++) {\n    var defaultTrack = newTracks.length; // a map from [program, channel] tuples to new track numbers\n\n    var trackMap = new Map(); // a map from channel numbers to current program numbers\n\n    var currentProgram = Array(16).fill(0);\n\n    for (var _i = 0, _a = tracks[i]; _i < _a.length; _i++) {\n      var event_1 = _a[_i];\n      var targetTrack = defaultTrack; // If the event has a channel, we need to find that channel's current\n      // program number and the appropriate track for this [program, channel]\n      // pair.\n\n      var channel = event_1.channel;\n\n      if (channel !== undefined) {\n        if (event_1.type === \"programChange\") {\n          currentProgram[channel] = event_1.programNumber;\n        }\n\n        var program = currentProgram[channel];\n        var trackKey = program + \" \" + channel;\n\n        if (trackMap.has(trackKey)) {\n          targetTrack = trackMap.get(trackKey);\n        } else {\n          targetTrack = defaultTrack + trackMap.size;\n          trackMap.set(trackKey, targetTrack);\n        }\n      }\n\n      if (!newTracks[targetTrack]) {\n        newTracks.push([]);\n      }\n\n      newTracks[targetTrack].push(event_1);\n    }\n  }\n\n  return newTracks;\n}","map":null,"metadata":{},"sourceType":"module"}