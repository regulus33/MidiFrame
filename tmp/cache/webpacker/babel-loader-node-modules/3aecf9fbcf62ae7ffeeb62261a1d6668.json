{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { Controller } from \"stimulus\";\nimport { requestFromCache, saveResponseInCache } from '../../helpers/cacheing_functions';\nimport { MIME_MP4 } from '../../helpers/constants';\nimport videojs from 'video.js';\nimport { ENABLE_CACHE } from '../../helpers/constants';\n\nvar _default = /*#__PURE__*/function (_Controller) {\n  _inherits(_default, _Controller);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var blob, blobURL;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                //DELETE BELOW LINE \n                // this.src \n                // UNCOMMENT TO BRING BACK DL \n                this._video.hide();\n\n                _context.next = 3;\n                return this.blob();\n\n              case 3:\n                blob = _context.sent;\n                blobURL = URL.createObjectURL(blob);\n                this.src = {\n                  src: blobURL,\n                  type: MIME_MP4\n                };\n\n                this._video.show();\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connect() {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n  }, {\n    key: \"cachedVideo\",\n    value: function () {\n      var _cachedVideo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var v;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                v = requestFromCache(this.src);\n\n                if (!v) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", v);\n\n              case 3:\n                _context2.next = 5;\n                return requestFromCache(this.src);\n\n              case 5:\n                _context2.t0 = _context2.sent;\n\n                if (!_context2.t0) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                _context2.next = 9;\n                return requestFromCache(this.src).blob();\n\n              case 9:\n                _context2.t0 = _context2.sent;\n\n              case 10:\n                return _context2.abrupt(\"return\", _context2.t0);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function cachedVideo() {\n        return _cachedVideo.apply(this, arguments);\n      }\n\n      return cachedVideo;\n    }()\n  }, {\n    key: \"onDownloadProgress\",\n    value: function onDownloadProgress(bufferedPercent) {\n      this.loadingBarTarget.style.width = \"\".concat(bufferedPercent, \"%\");\n    }\n  }, {\n    key: \"blob\",\n    value: function () {\n      var _blob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var b;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.cachedVideoBlob) {\n                  // if(false){\n                  b = this.cachedVideoBlob;\n                } else {\n                  b = this.fetchVideoBlob({\n                    downloadUrl: this.src\n                  });\n                  saveResponseInCache(this.src, b);\n                }\n\n                return _context3.abrupt(\"return\", b);\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function blob() {\n        return _blob.apply(this, arguments);\n      }\n\n      return blob;\n    }()\n  }, {\n    key: \"fetchVideoBlob\",\n    value: function () {\n      var _fetchVideoBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_ref) {\n        var downloadUrl, response, reader, contentLength, chunks, receivedLength, _yield$reader$read, done, value, percentDownloaded;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                downloadUrl = _ref.downloadUrl;\n                _context4.next = 3;\n                return fetch(downloadUrl);\n\n              case 3:\n                response = _context4.sent;\n                reader = response.body.getReader();\n                contentLength = +response.headers.get('Content-Length');\n                chunks = [];\n                receivedLength = 0; // received that many bytes at the moment\n\n              case 8:\n                if (!true) {\n                  _context4.next = 22;\n                  break;\n                }\n\n                _context4.next = 11;\n                return reader.read();\n\n              case 11:\n                _yield$reader$read = _context4.sent;\n                done = _yield$reader$read.done;\n                value = _yield$reader$read.value;\n                chunks.push(value);\n\n                if (!done) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                return _context4.abrupt(\"break\", 22);\n\n              case 17:\n                // notify UI of percent downloaded on each \n                receivedLength += value.length;\n                percentDownloaded = Math.floor(receivedLength / contentLength * 100);\n                this.onDownloadProgress(percentDownloaded);\n                _context4.next = 8;\n                break;\n\n              case 22:\n                return _context4.abrupt(\"return\", new Blob(chunks));\n\n              case 23:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function fetchVideoBlob(_x) {\n        return _fetchVideoBlob.apply(this, arguments);\n      }\n\n      return fetchVideoBlob;\n    }()\n  }, {\n    key: \"src\",\n    get: function get() {\n      return this._video.src();\n    },\n    set: function set(source) {\n      return this._video.src(source);\n    }\n  }, {\n    key: \"_video\",\n    get: function get() {\n      return videojs(this.videoTarget.id);\n    }\n  }]);\n\n  return _default;\n}(Controller);\n\n_default.targets = [\"video\", \"loadingBar\"];\nexport { _default as default };","map":{"version":3,"sources":["/Users/zack/andrWert43h/app/javascript/controllers/patterns/video_controller.js"],"names":["Controller","requestFromCache","saveResponseInCache","MIME_MP4","videojs","ENABLE_CACHE","_video","hide","blob","blobURL","URL","createObjectURL","src","type","show","v","bufferedPercent","loadingBarTarget","style","width","cachedVideoBlob","b","fetchVideoBlob","downloadUrl","fetch","response","reader","body","getReader","contentLength","headers","get","chunks","receivedLength","read","done","value","push","length","percentDownloaded","Math","floor","onDownloadProgress","Blob","source","videoTarget","id","targets"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,UAA3B;AACA,SAAUC,gBAAV,EAA4BC,mBAA5B,QAAwD,kCAAxD;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAASC,YAAT,QAA6B,yBAA7B;;;;;;;;;;;;;;;;;;;;;;AAOI;AACA;AACA;AACA,qBAAKC,MAAL,CAAYC,IAAZ;;;uBACiB,KAAKC,IAAL,E;;;AAAbA,gBAAAA,I;AACEC,gBAAAA,O,GAAUC,GAAG,CAACC,eAAJ,CAAoBH,IAApB,C;AAChB,qBAAKI,GAAL,GAAW;AAAEA,kBAAAA,GAAG,EAAEH,OAAP;AAAgBI,kBAAAA,IAAI,EAAEV;AAAtB,iBAAX;;AACA,qBAAKG,MAAL,CAAYQ,IAAZ;;;;;;;;;;;;;;;;;;;;;;;;;AAgBIC,gBAAAA,C,GAAId,gBAAgB,CAAC,KAAKW,GAAN,C;;qBACrBG,C;;;;;kDACMA,C;;;;uBAEId,gBAAgB,CAAC,KAAKW,GAAN,C;;;;;;;;;;;uBAAoBX,gBAAgB,CAAC,KAAKW,GAAN,CAAhB,CAA2BJ,IAA3B,E;;;;;;;;;;;;;;;;;;;;;;;;uCAGhCQ,e,EAAiB;AAClC,WAAKC,gBAAL,CAAsBC,KAAtB,CAA4BC,KAA5B,aAAuCH,eAAvC;AACD;;;;;;;;;;AAIC,oBAAG,KAAKI,eAAR,EAAwB;AACxB;AACIC,kBAAAA,CAAC,GAAG,KAAKD,eAAT;AACH,iBAHD,MAGO;AACLC,kBAAAA,CAAC,GAAG,KAAKC,cAAL,CAAoB;AAAEC,oBAAAA,WAAW,EAAE,KAAKX;AAApB,mBAApB,CAAJ;AACAV,kBAAAA,mBAAmB,CAAC,KAAKU,GAAN,EAAWS,CAAX,CAAnB;AACD;;kDACMA,C;;;;;;;;;;;;;;;;;;;;;;;;;;AAGaE,gBAAAA,W,QAAAA,W;;uBACQC,KAAK,CAACD,WAAD,C;;;AAA3BE,gBAAAA,Q;AACAC,gBAAAA,M,GAAgBD,QAAQ,CAACE,IAAT,CAAcC,SAAd,E;AAChBC,gBAAAA,a,GAAgB,CAACJ,QAAQ,CAACK,OAAT,CAAiBC,GAAjB,CAAqB,gBAArB,C;AACnBC,gBAAAA,M,GAAkB,E;AAClBC,gBAAAA,c,GAAkB,C,EAAE;;;qBAElB,I;;;;;;uBACwBP,MAAM,CAACQ,IAAP,E;;;;AAArBC,gBAAAA,I,sBAAAA,I;AAAMC,gBAAAA,K,sBAAAA,K;AAEbJ,gBAAAA,MAAM,CAACK,IAAP,CAAYD,KAAZ;;qBAEID,I;;;;;;;;AAEJ;AACAF,gBAAAA,cAAc,IAAIG,KAAK,CAACE,MAAxB;AAEIC,gBAAAA,iB,GAAoBC,IAAI,CAACC,KAAL,CAAaR,cAAc,GAAGJ,aAAnB,GAAqC,GAAhD,C;AAExB,qBAAKa,kBAAL,CAAwBH,iBAAxB;;;;;kDAGK,IAAII,IAAJ,CAASX,MAAT,C;;;;;;;;;;;;;;;;;;wBA1DC;AACR,aAAO,KAAK1B,MAAL,CAAYM,GAAZ,EAAP;AACD,K;sBAEOgC,M,EAAQ;AACd,aAAO,KAAKtC,MAAL,CAAYM,GAAZ,CAAgBgC,MAAhB,CAAP;AACD;;;wBAEW;AACV,aAAOxC,OAAO,CAAC,KAAKyC,WAAL,CAAiBC,EAAlB,CAAd;AACD;;;;EAzB0B9C,U;;SAEpB+C,O,GAAU,CAAC,OAAD,EAAU,YAAV,C","sourcesContent":["import { Controller } from \"stimulus\"\nimport  { requestFromCache, saveResponseInCache }  from '../../helpers/cacheing_functions'\nimport { MIME_MP4 } from '../../helpers/constants'\nimport videojs from 'video.js'\nimport { ENABLE_CACHE } from '../../helpers/constants'\n\nexport default class extends Controller {\n\n  static targets = [\"video\", \"loadingBar\"]\n\n  async connect() { \n    //DELETE BELOW LINE \n    // this.src \n    // UNCOMMENT TO BRING BACK DL \n    this._video.hide()\n    let blob = await this.blob()\n    const blobURL = URL.createObjectURL(blob)\n    this.src = { src: blobURL, type: MIME_MP4 }\n    this._video.show()\n  }\n\n  get src() {\n    return this._video.src()\n  }\n\n  set src(source) {\n    return this._video.src(source)\n  }\n\n  get _video(){\n    return videojs(this.videoTarget.id)\n  }\n\n  async cachedVideo() {\n    let v = requestFromCache(this.src)\n    if(v){\n      return v \n    }\n    return await requestFromCache(this.src) && await requestFromCache(this.src).blob()\n  }\n\n  onDownloadProgress(bufferedPercent) {\n    this.loadingBarTarget.style.width = `${bufferedPercent}%`\n  }\n\n  async blob() {\n    let b \n    if(this.cachedVideoBlob){\n    // if(false){\n        b = this.cachedVideoBlob\n    } else {\n      b = this.fetchVideoBlob({ downloadUrl: this.src}) \n      saveResponseInCache(this.src, b)\n    }\n    return b \n  }\n \n  async fetchVideoBlob({downloadUrl}) {\n    const response      = await fetch(downloadUrl)\n    const reader        = response.body.getReader();\n    const contentLength = +response.headers.get('Content-Length');\n    let chunks          = []\n    let receivedLength  = 0 // received that many bytes at the moment\n    \n    while(true) {\n      const {done, value} = await reader.read()\n  \n      chunks.push(value)\n  \n      if (done) break\n  \n      // notify UI of percent downloaded on each \n      receivedLength += value.length;\n  \n      let percentDownloaded = Math.floor(( receivedLength / contentLength ) * 100 )\n  \n      this.onDownloadProgress(percentDownloaded)\n    \n    }\n    return new Blob(chunks)\n  }\n  \n  \n}"]},"metadata":{},"sourceType":"module"}