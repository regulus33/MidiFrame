{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BinarySearch_1 = require(\"./BinarySearch\");\n\nvar ControlChange_1 = require(\"./ControlChange\");\n\nvar ControlChanges_1 = require(\"./ControlChanges\");\n\nvar PitchBend_1 = require(\"./PitchBend\");\n\nvar Instrument_1 = require(\"./Instrument\");\n\nvar Note_1 = require(\"./Note\");\n\nvar privateHeaderMap = new WeakMap();\n/**\n * A Track is a collection of notes and controlChanges\n */\n\nvar Track =\n/** @class */\nfunction () {\n  function Track(trackData, header) {\n    var _this = this;\n    /**\n     * The name of the track\n     */\n\n\n    this.name = \"\";\n    /**\n     * The track's note events\n     */\n\n    this.notes = [];\n    /**\n     * The control change events\n     */\n\n    this.controlChanges = ControlChanges_1.createControlChanges();\n    /**\n     * The pitch bend events\n     */\n\n    this.pitchBends = [];\n    privateHeaderMap.set(this, header);\n\n    if (trackData) {\n      var nameEvent = trackData.find(function (e) {\n        return e.type === \"trackName\";\n      });\n      this.name = nameEvent ? nameEvent.text : \"\";\n    }\n\n    this.instrument = new Instrument_1.Instrument(trackData, this); // defaults to 0\n\n    this.channel = 0;\n\n    if (trackData) {\n      var noteOns = trackData.filter(function (event) {\n        return event.type === \"noteOn\";\n      });\n      var noteOffs = trackData.filter(function (event) {\n        return event.type === \"noteOff\";\n      });\n\n      var _loop_1 = function _loop_1() {\n        var currentNote = noteOns.shift(); // set the channel based on the note\n\n        this_1.channel = currentNote.channel; // find the corresponding note off\n\n        var offIndex = noteOffs.findIndex(function (note) {\n          return note.noteNumber === currentNote.noteNumber && note.absoluteTime >= currentNote.absoluteTime;\n        });\n\n        if (offIndex !== -1) {\n          // once it's got the note off, add it\n          var noteOff = noteOffs.splice(offIndex, 1)[0];\n          this_1.addNote({\n            durationTicks: noteOff.absoluteTime - currentNote.absoluteTime,\n            midi: currentNote.noteNumber,\n            noteOffVelocity: noteOff.velocity / 127,\n            ticks: currentNote.absoluteTime,\n            velocity: currentNote.velocity / 127\n          });\n        }\n      };\n\n      var this_1 = this;\n\n      while (noteOns.length) {\n        _loop_1();\n      }\n\n      var controlChanges = trackData.filter(function (event) {\n        return event.type === \"controller\";\n      });\n      controlChanges.forEach(function (event) {\n        _this.addCC({\n          number: event.controllerType,\n          ticks: event.absoluteTime,\n          value: event.value / 127\n        });\n      });\n      var pitchBends = trackData.filter(function (event) {\n        return event.type === \"pitchBend\";\n      });\n      pitchBends.forEach(function (event) {\n        _this.addPitchBend({\n          ticks: event.absoluteTime,\n          // scale the value between -2^13 to 2^13 to -2 to 2\n          value: event.value / Math.pow(2, 13)\n        });\n      }); // const endOfTrack = trackData.find(event => event.type === \"endOfTrack\");\n    }\n  }\n  /**\n   * Add a note to the notes array\n   * @param props The note properties to add\n   */\n\n\n  Track.prototype.addNote = function (props) {\n    var header = privateHeaderMap.get(this);\n    var note = new Note_1.Note({\n      midi: 0,\n      ticks: 0,\n      velocity: 1\n    }, {\n      ticks: 0,\n      velocity: 0\n    }, header);\n    Object.assign(note, props);\n    BinarySearch_1.insert(this.notes, note, \"ticks\");\n    return this;\n  };\n  /**\n   * Add a control change to the track\n   * @param props\n   */\n\n\n  Track.prototype.addCC = function (props) {\n    var header = privateHeaderMap.get(this);\n    var cc = new ControlChange_1.ControlChange({\n      controllerType: props.number\n    }, header);\n    delete props.number;\n    Object.assign(cc, props);\n\n    if (!Array.isArray(this.controlChanges[cc.number])) {\n      this.controlChanges[cc.number] = [];\n    }\n\n    BinarySearch_1.insert(this.controlChanges[cc.number], cc, \"ticks\");\n    return this;\n  };\n  /**\n   * Add a control change to the track\n   */\n\n\n  Track.prototype.addPitchBend = function (props) {\n    var header = privateHeaderMap.get(this);\n    var pb = new PitchBend_1.PitchBend({}, header);\n    Object.assign(pb, props);\n    BinarySearch_1.insert(this.pitchBends, pb, \"ticks\");\n    return this;\n  };\n\n  Object.defineProperty(Track.prototype, \"duration\", {\n    /**\n     * The end time of the last event in the track\n     */\n    get: function get() {\n      if (!this.notes.length) {\n        return 0;\n      }\n\n      var maxDuration = this.notes[this.notes.length - 1].time + this.notes[this.notes.length - 1].duration;\n\n      for (var i = 0; i < this.notes.length - 1; i++) {\n        var duration = this.notes[i].time + this.notes[i].duration;\n\n        if (maxDuration < duration) {\n          maxDuration = duration;\n        }\n      }\n\n      return maxDuration;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Track.prototype, \"durationTicks\", {\n    /**\n     * The end time of the last event in the track in ticks\n     */\n    get: function get() {\n      if (!this.notes.length) {\n        return 0;\n      }\n\n      var maxDuration = this.notes[this.notes.length - 1].ticks + this.notes[this.notes.length - 1].durationTicks;\n\n      for (var i = 0; i < this.notes.length - 1; i++) {\n        var duration = this.notes[i].ticks + this.notes[i].durationTicks;\n\n        if (maxDuration < duration) {\n          maxDuration = duration;\n        }\n      }\n\n      return maxDuration;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Assign the json values to this track\n   */\n\n  Track.prototype.fromJSON = function (json) {\n    var _this = this;\n\n    this.name = json.name;\n    this.channel = json.channel;\n    this.instrument = new Instrument_1.Instrument(undefined, this);\n    this.instrument.fromJSON(json.instrument);\n\n    for (var number in json.controlChanges) {\n      if (json.controlChanges[number]) {\n        json.controlChanges[number].forEach(function (cc) {\n          _this.addCC({\n            number: cc.number,\n            ticks: cc.ticks,\n            value: cc.value\n          });\n        });\n      }\n    }\n\n    json.notes.forEach(function (n) {\n      _this.addNote({\n        durationTicks: n.durationTicks,\n        midi: n.midi,\n        ticks: n.ticks,\n        velocity: n.velocity\n      });\n    });\n  };\n  /**\n   * Convert the track into a JSON format\n   */\n\n\n  Track.prototype.toJSON = function () {\n    // convert all the CCs to JSON\n    var controlChanges = {};\n\n    for (var i = 0; i < 127; i++) {\n      if (this.controlChanges.hasOwnProperty(i)) {\n        controlChanges[i] = this.controlChanges[i].map(function (c) {\n          return c.toJSON();\n        });\n      }\n    }\n\n    return {\n      channel: this.channel,\n      controlChanges: controlChanges,\n      pitchBends: this.pitchBends.map(function (pb) {\n        return pb.toJSON();\n      }),\n      instrument: this.instrument.toJSON(),\n      name: this.name,\n      notes: this.notes.map(function (n) {\n        return n.toJSON();\n      })\n    };\n  };\n\n  return Track;\n}();\n\nexports.Track = Track;","map":null,"metadata":{},"sourceType":"module"}