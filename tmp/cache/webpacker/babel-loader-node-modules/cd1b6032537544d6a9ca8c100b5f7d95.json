{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar InstrumentMaps_1 = require(\"./InstrumentMaps\");\n/**\n * @hidden\n */\n\n\nvar privateTrackMap = new WeakMap();\n/**\n * Describes the midi instrument of a track\n */\n\nvar Instrument =\n/** @class */\nfunction () {\n  /**\n   * @param trackData\n   * @param track\n   */\n  function Instrument(trackData, track) {\n    /**\n     * The instrument number\n     */\n    this.number = 0;\n    privateTrackMap.set(this, track);\n    this.number = 0;\n\n    if (trackData) {\n      var programChange = trackData.find(function (e) {\n        return e.type === \"programChange\";\n      });\n\n      if (programChange) {\n        this.number = programChange.programNumber;\n      }\n    }\n  }\n\n  Object.defineProperty(Instrument.prototype, \"name\", {\n    /**\n     * The common name of the instrument\n     */\n    get: function get() {\n      if (this.percussion) {\n        return InstrumentMaps_1.DrumKitByPatchID[this.number];\n      } else {\n        return InstrumentMaps_1.instrumentByPatchID[this.number];\n      }\n    },\n    set: function set(n) {\n      var patchNumber = InstrumentMaps_1.instrumentByPatchID.indexOf(n);\n\n      if (patchNumber !== -1) {\n        this.number = patchNumber;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Instrument.prototype, \"family\", {\n    /**\n     * The instrument family, e.g. \"piano\".\n     */\n    get: function get() {\n      if (this.percussion) {\n        return \"drums\";\n      } else {\n        return InstrumentMaps_1.InstrumentFamilyByID[Math.floor(this.number / 8)];\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Instrument.prototype, \"percussion\", {\n    /**\n     * If the instrument is a percussion instrument\n     */\n    get: function get() {\n      var track = privateTrackMap.get(this);\n      return track.channel === 9;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Convert it to JSON form\n   */\n\n  Instrument.prototype.toJSON = function () {\n    return {\n      family: this.family,\n      name: this.name,\n      number: this.number\n    };\n  };\n  /**\n   * Convert from JSON form\n   */\n\n\n  Instrument.prototype.fromJSON = function (json) {\n    this.number = json.number;\n  };\n\n  return Instrument;\n}();\n\nexports.Instrument = Instrument;","map":null,"metadata":{},"sourceType":"module"}