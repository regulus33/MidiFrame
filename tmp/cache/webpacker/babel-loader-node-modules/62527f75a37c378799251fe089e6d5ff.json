{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n// data should be the same type of format returned by parseMidi\n// for maximum compatibililty, returns an array of byte values, suitable for conversion to Buffer, Uint8Array, etc.\n// opts:\n// - running              reuse previous eventTypeByte when possible, to compress file\n// - useByte9ForNoteOff   use 0x09 for noteOff when velocity is zero\nfunction writeMidi(data, opts) {\n  if (_typeof(data) !== 'object') throw 'Invalid MIDI data';\n  opts = opts || {};\n  var header = data.header || {};\n  var tracks = data.tracks || [];\n  var i,\n      len = tracks.length;\n  var w = new Writer();\n  writeHeader(w, header, len);\n\n  for (i = 0; i < len; i++) {\n    writeTrack(w, tracks[i], opts);\n  }\n\n  return w.buffer;\n}\n\nfunction writeHeader(w, header, numTracks) {\n  var format = header.format == null ? 1 : header.format;\n  var timeDivision = 128;\n\n  if (header.timeDivision) {\n    timeDivision = header.timeDivision;\n  } else if (header.ticksPerFrame && header.framesPerSecond) {\n    timeDivision = -(header.framesPerSecond & 0xFF) << 8 | header.ticksPerFrame & 0xFF;\n  } else if (header.ticksPerBeat) {\n    timeDivision = header.ticksPerBeat & 0x7FFF;\n  }\n\n  var h = new Writer();\n  h.writeUInt16(format);\n  h.writeUInt16(numTracks);\n  h.writeUInt16(timeDivision);\n  w.writeChunk('MThd', h.buffer);\n}\n\nfunction writeTrack(w, track, opts) {\n  var t = new Writer();\n  var i,\n      len = track.length;\n  var eventTypeByte = null;\n\n  for (i = 0; i < len; i++) {\n    // Reuse last eventTypeByte when opts.running is set, or event.running is explicitly set on it.\n    // parseMidi will set event.running for each event, so that we can get an exact copy by default.\n    // Explicitly set opts.running to false, to override event.running and never reuse last eventTypeByte.\n    if (opts.running === false || !opts.running && !track[i].running) eventTypeByte = null;\n    eventTypeByte = writeEvent(t, track[i], eventTypeByte, opts.useByte9ForNoteOff);\n  }\n\n  w.writeChunk('MTrk', t.buffer);\n}\n\nfunction writeEvent(w, event, lastEventTypeByte, useByte9ForNoteOff) {\n  var type = event.type;\n  var deltaTime = event.deltaTime;\n  var text = event.text || '';\n  var data = event.data || [];\n  var eventTypeByte = null;\n  w.writeVarInt(deltaTime);\n\n  switch (type) {\n    // meta events\n    case 'sequenceNumber':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x00);\n      w.writeVarInt(2);\n      w.writeUInt16(event.number);\n      break;\n\n    case 'text':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x01);\n      w.writeVarInt(text.length);\n      w.writeString(text);\n      break;\n\n    case 'copyrightNotice':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x02);\n      w.writeVarInt(text.length);\n      w.writeString(text);\n      break;\n\n    case 'trackName':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x03);\n      w.writeVarInt(text.length);\n      w.writeString(text);\n      break;\n\n    case 'instrumentName':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x04);\n      w.writeVarInt(text.length);\n      w.writeString(text);\n      break;\n\n    case 'lyrics':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x05);\n      w.writeVarInt(text.length);\n      w.writeString(text);\n      break;\n\n    case 'marker':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x06);\n      w.writeVarInt(text.length);\n      w.writeString(text);\n      break;\n\n    case 'cuePoint':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x07);\n      w.writeVarInt(text.length);\n      w.writeString(text);\n      break;\n\n    case 'channelPrefix':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x20);\n      w.writeVarInt(1);\n      w.writeUInt8(event.channel);\n      break;\n\n    case 'portPrefix':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x21);\n      w.writeVarInt(1);\n      w.writeUInt8(event.port);\n      break;\n\n    case 'endOfTrack':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x2F);\n      w.writeVarInt(0);\n      break;\n\n    case 'setTempo':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x51);\n      w.writeVarInt(3);\n      w.writeUInt24(event.microsecondsPerBeat);\n      break;\n\n    case 'smpteOffset':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x54);\n      w.writeVarInt(5);\n      var FRAME_RATES = {\n        24: 0x00,\n        25: 0x20,\n        29: 0x40,\n        30: 0x60\n      };\n      var hourByte = event.hour & 0x1F | FRAME_RATES[event.frameRate];\n      w.writeUInt8(hourByte);\n      w.writeUInt8(event.min);\n      w.writeUInt8(event.sec);\n      w.writeUInt8(event.frame);\n      w.writeUInt8(event.subFrame);\n      break;\n\n    case 'timeSignature':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x58);\n      w.writeVarInt(4);\n      w.writeUInt8(event.numerator);\n      var denominator = Math.floor(Math.log(event.denominator) / Math.LN2) & 0xFF;\n      w.writeUInt8(denominator);\n      w.writeUInt8(event.metronome);\n      w.writeUInt8(event.thirtyseconds || 8);\n      break;\n\n    case 'keySignature':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x59);\n      w.writeVarInt(2);\n      w.writeInt8(event.key);\n      w.writeUInt8(event.scale);\n      break;\n\n    case 'sequencerSpecific':\n      w.writeUInt8(0xFF);\n      w.writeUInt8(0x7F);\n      w.writeVarInt(data.length);\n      w.writeBytes(data);\n      break;\n\n    case 'unknownMeta':\n      if (event.metatypeByte != null) {\n        w.writeUInt8(0xFF);\n        w.writeUInt8(event.metatypeByte);\n        w.writeVarInt(data.length);\n        w.writeBytes(data);\n      }\n\n      break;\n    // system-exclusive\n\n    case 'sysEx':\n      w.writeUInt8(0xF0);\n      w.writeVarInt(data.length);\n      w.writeBytes(data);\n      break;\n\n    case 'endSysEx':\n      w.writeUInt8(0xF7);\n      w.writeVarInt(data.length);\n      w.writeBytes(data);\n      break;\n    // channel events\n\n    case 'noteOff':\n      // Use 0x90 when opts.useByte9ForNoteOff is set and velocity is zero, or when event.byte9 is explicitly set on it.\n      // parseMidi will set event.byte9 for each event, so that we can get an exact copy by default.\n      // Explicitly set opts.useByte9ForNoteOff to false, to override event.byte9 and always use 0x80 for noteOff events.\n      var noteByte = useByte9ForNoteOff !== false && event.byte9 || useByte9ForNoteOff && event.velocity == 0 ? 0x90 : 0x80;\n      eventTypeByte = noteByte | event.channel;\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte);\n      w.writeUInt8(event.noteNumber);\n      w.writeUInt8(event.velocity);\n      break;\n\n    case 'noteOn':\n      eventTypeByte = 0x90 | event.channel;\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte);\n      w.writeUInt8(event.noteNumber);\n      w.writeUInt8(event.velocity);\n      break;\n\n    case 'noteAftertouch':\n      eventTypeByte = 0xA0 | event.channel;\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte);\n      w.writeUInt8(event.noteNumber);\n      w.writeUInt8(event.amount);\n      break;\n\n    case 'controller':\n      eventTypeByte = 0xB0 | event.channel;\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte);\n      w.writeUInt8(event.controllerType);\n      w.writeUInt8(event.value);\n      break;\n\n    case 'programChange':\n      eventTypeByte = 0xC0 | event.channel;\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte);\n      w.writeUInt8(event.programNumber);\n      break;\n\n    case 'channelAftertouch':\n      eventTypeByte = 0xD0 | event.channel;\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte);\n      w.writeUInt8(event.amount);\n      break;\n\n    case 'pitchBend':\n      eventTypeByte = 0xE0 | event.channel;\n      if (eventTypeByte !== lastEventTypeByte) w.writeUInt8(eventTypeByte);\n      var value14 = 0x2000 + event.value;\n      var lsb14 = value14 & 0x7F;\n      var msb14 = value14 >> 7 & 0x7F;\n      w.writeUInt8(lsb14);\n      w.writeUInt8(msb14);\n      break;\n\n    default:\n      throw 'Unrecognized event type: ' + type;\n  }\n\n  return eventTypeByte;\n}\n\nfunction Writer() {\n  this.buffer = [];\n}\n\nWriter.prototype.writeUInt8 = function (v) {\n  this.buffer.push(v & 0xFF);\n};\n\nWriter.prototype.writeInt8 = Writer.prototype.writeUInt8;\n\nWriter.prototype.writeUInt16 = function (v) {\n  var b0 = v >> 8 & 0xFF,\n      b1 = v & 0xFF;\n  this.writeUInt8(b0);\n  this.writeUInt8(b1);\n};\n\nWriter.prototype.writeInt16 = Writer.prototype.writeUInt16;\n\nWriter.prototype.writeUInt24 = function (v) {\n  var b0 = v >> 16 & 0xFF,\n      b1 = v >> 8 & 0xFF,\n      b2 = v & 0xFF;\n  this.writeUInt8(b0);\n  this.writeUInt8(b1);\n  this.writeUInt8(b2);\n};\n\nWriter.prototype.writeInt24 = Writer.prototype.writeUInt24;\n\nWriter.prototype.writeUInt32 = function (v) {\n  var b0 = v >> 24 & 0xFF,\n      b1 = v >> 16 & 0xFF,\n      b2 = v >> 8 & 0xFF,\n      b3 = v & 0xFF;\n  this.writeUInt8(b0);\n  this.writeUInt8(b1);\n  this.writeUInt8(b2);\n  this.writeUInt8(b3);\n};\n\nWriter.prototype.writeInt32 = Writer.prototype.writeUInt32;\n\nWriter.prototype.writeBytes = function (arr) {\n  this.buffer = this.buffer.concat(Array.prototype.slice.call(arr, 0));\n};\n\nWriter.prototype.writeString = function (str) {\n  var i,\n      len = str.length,\n      arr = [];\n\n  for (i = 0; i < len; i++) {\n    arr.push(str.codePointAt(i));\n  }\n\n  this.writeBytes(arr);\n};\n\nWriter.prototype.writeVarInt = function (v) {\n  if (v < 0) throw \"Cannot write negative variable-length integer\";\n\n  if (v <= 0x7F) {\n    this.writeUInt8(v);\n  } else {\n    var i = v;\n    var bytes = [];\n    bytes.push(i & 0x7F);\n    i >>= 7;\n\n    while (i) {\n      var b = i & 0x7F | 0x80;\n      bytes.push(b);\n      i >>= 7;\n    }\n\n    this.writeBytes(bytes.reverse());\n  }\n};\n\nWriter.prototype.writeChunk = function (id, data) {\n  this.writeString(id);\n  this.writeUInt32(data.length);\n  this.writeBytes(data);\n};\n\nmodule.exports = writeMidi;","map":null,"metadata":{},"sourceType":"module"}