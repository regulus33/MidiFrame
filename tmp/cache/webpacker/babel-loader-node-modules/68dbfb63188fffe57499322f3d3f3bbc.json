{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { Controller } from \"stimulus\";\n\nvar _default = /*#__PURE__*/function (_Controller) {\n  _inherits(_default, _Controller);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"connect\",\n    value: function connect() {\n      this.channel = parseInt(this.element.getAttribute(\"data-saved-channel\")); //get the channel \n\n      this.lastChannelTargetClicked = this.selectedChannel();\n      this.stepLength = parseInt(this.element.getAttribute(\"data-saved-step\")); //get the channel \n      // TODO: how do we de alloc this? \n\n      this.midiRecorderController = this.application.getControllerForElementAndIdentifier(this.element, \"patterns--midi-recorder\");\n    }\n  }, {\n    key: \"stepClick\",\n    value: function stepClick(event) {\n      var step = parseInt(event.target.getAttribute(\"data-step\"));\n      this.stepLength = step;\n\n      for (var i = 0; i < this.stepLength; i++) {\n        var backGroundColor = \"#db7676\";\n        this.stepTargets[i].style.backgroundColor = backGroundColor;\n      }\n\n      for (var _i = this.stepLength; _i < 32; _i++) {\n        this.stepTargets[_i].style.backgroundColor = \"transparent\";\n      }\n    }\n  }, {\n    key: \"selectedChannel\",\n    value: function selectedChannel() {\n      var _this = this;\n\n      return this.channelTargets.find(function (e) {\n        return parseInt(e.getAttribute(\"data-channel\")) === _this.channel;\n      });\n    }\n  }, {\n    key: \"channelClick\",\n    value: function channelClick(event) {\n      this.channel = parseInt(event.target.getAttribute(\"data-channel\"));\n      this.midiRecorderController.resetMidiListeners(this.channel); // set background of last el clicked to null\n\n      this.lastChannelTargetClicked.style.backgroundColor = \"\"; // make this channel's clicked state obvious to user\n      // select the correct channel color (we color code each channel)\n\n      event.target.style.backgroundColor = \"#db7676\";\n      this.lastChannelTargetClicked = event.target;\n    }\n  }]);\n\n  return _default;\n}(Controller);\n\n_default.targets = [// probably dont need these channel targets \n'channel', 'step'];\nexport { _default as default };","map":{"version":3,"sources":["/Users/zack/andrWert43h/app/javascript/controllers/patterns/step_and_channel_controller.js"],"names":["Controller","channel","parseInt","element","getAttribute","lastChannelTargetClicked","selectedChannel","stepLength","midiRecorderController","application","getControllerForElementAndIdentifier","event","step","target","i","backGroundColor","stepTargets","style","backgroundColor","channelTargets","find","e","resetMidiListeners","targets"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,UAA3B;;;;;;;;;;;;;;;8BAUY;AACR,WAAKC,OAAL,GAAeC,QAAQ,CAAC,KAAKC,OAAL,CAAaC,YAAb,CAA0B,oBAA1B,CAAD,CAAvB,CADQ,CACkE;;AAC1E,WAAKC,wBAAL,GAAgC,KAAKC,eAAL,EAAhC;AACA,WAAKC,UAAL,GAAkBL,QAAQ,CAAC,KAAKC,OAAL,CAAaC,YAAb,CAA0B,iBAA1B,CAAD,CAA1B,CAHQ,CAGkE;AAC1E;;AACA,WAAKI,sBAAL,GAA8B,KAAKC,WAAL,CAAiBC,oCAAjB,CAAsD,KAAKP,OAA3D,EAAoE,yBAApE,CAA9B;AACD;;;8BAESQ,K,EAAO;AACf,UAAIC,IAAI,GAAGV,QAAQ,CAACS,KAAK,CAACE,MAAN,CAAaT,YAAb,CAA0B,WAA1B,CAAD,CAAnB;AACA,WAAKG,UAAL,GAAkBK,IAAlB;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAI,KAAKP,UAA1B,EAAuCO,CAAC,EAAxC,EAA4C;AAC1C,YAAIC,eAAe,GAAG,SAAtB;AACA,aAAKC,WAAL,CAAiBF,CAAjB,EAAoBG,KAApB,CAA0BC,eAA1B,GAA4CH,eAA5C;AACD;;AAED,WAAK,IAAID,EAAC,GAAG,KAAKP,UAAlB,EAA8BO,EAAC,GAAG,EAAlC,EAAsCA,EAAC,EAAvC,EAA2C;AACzC,aAAKE,WAAL,CAAiBF,EAAjB,EAAoBG,KAApB,CAA0BC,eAA1B,GAA4C,aAA5C;AACD;AACF;;;sCAEiB;AAAA;;AAChB,aAAO,KAAKC,cAAL,CAAoBC,IAApB,CAAyB,UAACC,CAAD;AAAA,eAAQnB,QAAQ,CAACmB,CAAC,CAACjB,YAAF,CAAe,cAAf,CAAD,CAAR,KAA6C,KAAI,CAACH,OAA1D;AAAA,OAAzB,CAAP;AACD;;;iCAEYU,K,EAAO;AAClB,WAAKV,OAAL,GAAeC,QAAQ,CAACS,KAAK,CAACE,MAAN,CAAaT,YAAb,CAA0B,cAA1B,CAAD,CAAvB;AACA,WAAKI,sBAAL,CAA4Bc,kBAA5B,CAA+C,KAAKrB,OAApD,EAFkB,CAGlB;;AACA,WAAKI,wBAAL,CAA8BY,KAA9B,CAAoCC,eAApC,GAAsD,EAAtD,CAJkB,CAKlB;AACA;;AACAP,MAAAA,KAAK,CAACE,MAAN,CAAaI,KAAb,CAAmBC,eAAnB,GAAqC,SAArC;AACA,WAAKb,wBAAL,GAAgCM,KAAK,CAACE,MAAtC;AACD;;;;EA1C0Bb,U;;SAEpBuB,O,GAAU,CACf;AACA,SAFe,EAGf,MAHe,C","sourcesContent":["import { Controller } from \"stimulus\";\n\nexport default class extends Controller {\n\n  static targets = [\n    // probably dont need these channel targets \n    'channel',\n    'step',\n  ];\n\n  connect() {\n    this.channel = parseInt(this.element.getAttribute(\"data-saved-channel\")); //get the channel \n    this.lastChannelTargetClicked = this.selectedChannel();\n    this.stepLength = parseInt(this.element.getAttribute(\"data-saved-step\")); //get the channel \n    // TODO: how do we de alloc this? \n    this.midiRecorderController = this.application.getControllerForElementAndIdentifier(this.element, \"patterns--midi-recorder\");\n  }\n\n  stepClick(event) {\n    let step = parseInt(event.target.getAttribute(\"data-step\"));\n    this.stepLength = step\n    for (let i = 0; i < (this.stepLength); i++) {\n      let backGroundColor = \"#db7676\"\n      this.stepTargets[i].style.backgroundColor = backGroundColor;\n    }\n\n    for (let i = this.stepLength; i < 32; i++) {\n      this.stepTargets[i].style.backgroundColor = \"transparent\";\n    }\n  }\n\n  selectedChannel() {\n    return this.channelTargets.find((e) => (parseInt(e.getAttribute(\"data-channel\")) === this.channel));\n  }\n\n  channelClick(event) {\n    this.channel = parseInt(event.target.getAttribute(\"data-channel\"));\n    this.midiRecorderController.resetMidiListeners(this.channel);\n    // set background of last el clicked to null\n    this.lastChannelTargetClicked.style.backgroundColor = \"\";\n    // make this channel's clicked state obvious to user\n    // select the correct channel color (we color code each channel)\n    event.target.style.backgroundColor = \"#db7676\";\n    this.lastChannelTargetClicked = event.target;\n  }\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}