{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Convert a midi note into a pitch\n */\n\nfunction midiToPitch(midi) {\n  var octave = Math.floor(midi / 12) - 1;\n  return midiToPitchClass(midi) + octave.toString();\n}\n/**\n * Convert a midi note to a pitch class (just the pitch no octave)\n */\n\n\nfunction midiToPitchClass(midi) {\n  var scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n  var note = midi % 12;\n  return scaleIndexToNote[note];\n}\n/**\n * Convert a pitch class to a MIDI note\n */\n\n\nfunction pitchClassToMidi(pitch) {\n  var scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n  return scaleIndexToNote.indexOf(pitch);\n}\n/**\n * Convert a pitch to a midi number\n */\n// tslint:disable-next-line: only-arrow-functions typedef\n\n\nvar pitchToMidi = function () {\n  var regexp = /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i;\n  var noteToScaleIndex = {\n    // tslint:disable-next-line: object-literal-sort-keys\n    cbb: -2,\n    cb: -1,\n    c: 0,\n    \"c#\": 1,\n    cx: 2,\n    dbb: 0,\n    db: 1,\n    d: 2,\n    \"d#\": 3,\n    dx: 4,\n    ebb: 2,\n    eb: 3,\n    e: 4,\n    \"e#\": 5,\n    ex: 6,\n    fbb: 3,\n    fb: 4,\n    f: 5,\n    \"f#\": 6,\n    fx: 7,\n    gbb: 5,\n    gb: 6,\n    g: 7,\n    \"g#\": 8,\n    gx: 9,\n    abb: 7,\n    ab: 8,\n    a: 9,\n    \"a#\": 10,\n    ax: 11,\n    bbb: 9,\n    bb: 10,\n    b: 11,\n    \"b#\": 12,\n    bx: 13\n  };\n  return function (note) {\n    var split = regexp.exec(note);\n    var pitch = split[1];\n    var octave = split[2];\n    var index = noteToScaleIndex[pitch.toLowerCase()];\n    return index + (parseInt(octave, 10) + 1) * 12;\n  };\n}();\n\nvar privateHeaderMap = new WeakMap();\n/**\n * A Note consists of a noteOn and noteOff event\n */\n\nvar Note =\n/** @class */\nfunction () {\n  function Note(noteOn, noteOff, header) {\n    privateHeaderMap.set(this, header);\n    this.midi = noteOn.midi;\n    this.velocity = noteOn.velocity;\n    this.noteOffVelocity = noteOff.velocity;\n    this.ticks = noteOn.ticks;\n    this.durationTicks = noteOff.ticks - noteOn.ticks;\n  }\n\n  Object.defineProperty(Note.prototype, \"name\", {\n    /**\n     * The note name and octave in scientific pitch notation, e.g. \"C4\"\n     */\n    get: function get() {\n      return midiToPitch(this.midi);\n    },\n    set: function set(n) {\n      this.midi = pitchToMidi(n);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Note.prototype, \"octave\", {\n    /**\n     * The notes octave number\n     */\n    get: function get() {\n      return Math.floor(this.midi / 12) - 1;\n    },\n    set: function set(o) {\n      var diff = o - this.octave;\n      this.midi += diff * 12;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Note.prototype, \"pitch\", {\n    /**\n     * The pitch class name. e.g. \"A\"\n     */\n    get: function get() {\n      return midiToPitchClass(this.midi);\n    },\n    set: function set(p) {\n      this.midi = 12 * (this.octave + 1) + pitchClassToMidi(p);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Note.prototype, \"duration\", {\n    /**\n     * The duration of the segment in seconds\n     */\n    get: function get() {\n      var header = privateHeaderMap.get(this);\n      return header.ticksToSeconds(this.ticks + this.durationTicks) - header.ticksToSeconds(this.ticks);\n    },\n    set: function set(d) {\n      var header = privateHeaderMap.get(this);\n      var noteEndTicks = header.secondsToTicks(this.time + d);\n      this.durationTicks = noteEndTicks - this.ticks;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Note.prototype, \"time\", {\n    /**\n     * The time of the event in seconds\n     */\n    get: function get() {\n      var header = privateHeaderMap.get(this);\n      return header.ticksToSeconds(this.ticks);\n    },\n    set: function set(t) {\n      var header = privateHeaderMap.get(this);\n      this.ticks = header.secondsToTicks(t);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Note.prototype, \"bars\", {\n    /**\n     * The number of measures (and partial measures) to this beat.\n     * Takes into account time signature changes\n     * @readonly\n     */\n    get: function get() {\n      var header = privateHeaderMap.get(this);\n      return header.ticksToMeasures(this.ticks);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Note.prototype.toJSON = function () {\n    return {\n      duration: this.duration,\n      durationTicks: this.durationTicks,\n      midi: this.midi,\n      name: this.name,\n      ticks: this.ticks,\n      time: this.time,\n      velocity: this.velocity\n    };\n  };\n\n  return Note;\n}();\n\nexports.Note = Note;","map":null,"metadata":{},"sourceType":"module"}