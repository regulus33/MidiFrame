{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { CACHE_NAME } from './constants';\nexport var myCache = function myCache() {\n  return caches.open(CACHE_NAME);\n};\nexport var requestObject = function requestObject(uri) {\n  return new Request(uri);\n};\nexport var responseObject = function responseObject(blob) {\n  return new Response(blob);\n};\nexport var requestFromCache = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(request) {\n    var cache, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return myCache();\n\n          case 2:\n            cache = _context.sent;\n            _context.next = 5;\n            return cache.match(request);\n\n          case 5:\n            response = _context.sent;\n            return _context.abrupt(\"return\", response);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function requestFromCache(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var saveResponseInCache = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(requestString, blob) {\n    var cache;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return myCache();\n\n          case 2:\n            cache = _context2.sent;\n            cache.put(requestObject(requestString), responseObject(blob));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function saveResponseInCache(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/zack/andrWert43h/app/javascript/helpers/cacheing_functions.js"],"names":["CACHE_NAME","myCache","caches","open","requestObject","uri","Request","responseObject","blob","Response","requestFromCache","request","cache","match","response","saveResponseInCache","requestString","put"],"mappings":";;;;;;AAAA,SAAQA,UAAR,QAAyB,aAAzB;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,SAAMC,MAAM,CAACC,IAAP,CAAaH,UAAb,CAAN;AAAA,CAAhB;AAEP,OAAO,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAAEC,GAAF,EAAW;AACtC,SAAO,IAAIC,OAAJ,CAAaD,GAAb,CAAP;AACD,CAFM;AAIP,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAAEC,IAAF,EAAY;AACxC,SAAO,IAAIC,QAAJ,CAAcD,IAAd,CAAP;AACD,CAFM;AAIP,OAAO,IAAME,gBAAgB;AAAA,sEAAG,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACNV,OAAO,EADD;;AAAA;AACvBW,YAAAA,KADuB;AAAA;AAAA,mBAENA,KAAK,CAACC,KAAN,CAAaF,OAAb,CAFM;;AAAA;AAEvBG,YAAAA,QAFuB;AAAA,6CAGvBA,QAHuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBJ,gBAAgB;AAAA;AAAA;AAAA,GAAtB;AAMP,OAAO,IAAMK,mBAAmB;AAAA,uEAAG,kBAAOC,aAAP,EAAsBR,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACfP,OAAO,EADQ;;AAAA;AAC7BW,YAAAA,KAD6B;AAEjCA,YAAAA,KAAK,CAACK,GAAN,CACEb,aAAa,CAAEY,aAAF,CADf,EAEET,cAAc,CAAEC,IAAF,CAFhB;;AAFiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBO,mBAAmB;AAAA;AAAA;AAAA,GAAzB","sourcesContent":["import {CACHE_NAME} from './constants'\n\nexport const myCache = () => caches.open( CACHE_NAME )\n\nexport const requestObject = ( uri ) => {\n  return new Request( uri )\n}\n\nexport const responseObject = ( blob ) => {\n  return new Response( blob )\n}\n\nexport const requestFromCache = async( request ) => {\n  let    cache    = await myCache()\n  let    response = await cache.match( request )\n  return response \n}\n\nexport const saveResponseInCache = async( requestString, blob ) => {\n  let cache = await myCache()\n  cache.put(\n    requestObject( requestString ),\n    responseObject( blob )\n  )\n}\n\n\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}