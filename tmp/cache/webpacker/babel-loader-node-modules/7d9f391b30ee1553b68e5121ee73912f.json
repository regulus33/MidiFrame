{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Return the index of the element at or before the given property\n * @hidden\n */\n\nfunction search(array, value, prop) {\n  if (prop === void 0) {\n    prop = \"ticks\";\n  }\n\n  var beginning = 0;\n  var len = array.length;\n  var end = len;\n\n  if (len > 0 && array[len - 1][prop] <= value) {\n    return len - 1;\n  }\n\n  while (beginning < end) {\n    // calculate the midpoint for roughly equal partition\n    var midPoint = Math.floor(beginning + (end - beginning) / 2);\n    var event_1 = array[midPoint];\n    var nextEvent = array[midPoint + 1];\n\n    if (event_1[prop] === value) {\n      // choose the last one that has the same value\n      for (var i = midPoint; i < array.length; i++) {\n        var testEvent = array[i];\n\n        if (testEvent[prop] === value) {\n          midPoint = i;\n        }\n      }\n\n      return midPoint;\n    } else if (event_1[prop] < value && nextEvent[prop] > value) {\n      return midPoint;\n    } else if (event_1[prop] > value) {\n      // search lower\n      end = midPoint;\n    } else if (event_1[prop] < value) {\n      // search upper\n      beginning = midPoint + 1;\n    }\n  }\n\n  return -1;\n}\n\nexports.search = search;\n/**\n * Does a binary search to insert the note\n * in the correct spot in the array\n * @hidden\n */\n\nfunction insert(array, event, prop) {\n  if (prop === void 0) {\n    prop = \"ticks\";\n  }\n\n  if (array.length) {\n    var index = search(array, event[prop], prop);\n    array.splice(index + 1, 0, event);\n  } else {\n    array.push(event);\n  }\n}\n\nexports.insert = insert;","map":null,"metadata":{},"sourceType":"module"}