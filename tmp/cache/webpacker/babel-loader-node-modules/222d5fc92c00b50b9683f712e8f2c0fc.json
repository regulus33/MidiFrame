{"ast":null,"code":"\"use strict\";\n\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {\n    s += arguments[i].length;\n  }\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) {\n    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {\n      r[k] = a[j];\n    }\n  }\n\n  return r;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar midi_file_1 = require(\"midi-file\");\n\nvar Header_1 = require(\"./Header\");\n\nvar array_flatten_1 = __importDefault(require(\"array-flatten\"));\n\nfunction encodeNote(note, channel) {\n  return [{\n    absoluteTime: note.ticks,\n    channel: channel,\n    deltaTime: 0,\n    noteNumber: note.midi,\n    type: \"noteOn\",\n    velocity: Math.floor(note.velocity * 127)\n  }, {\n    absoluteTime: note.ticks + note.durationTicks,\n    channel: channel,\n    deltaTime: 0,\n    noteNumber: note.midi,\n    type: \"noteOff\",\n    velocity: Math.floor(note.noteOffVelocity * 127)\n  }];\n}\n\nfunction encodeNotes(track) {\n  return array_flatten_1[\"default\"](track.notes.map(function (note) {\n    return encodeNote(note, track.channel);\n  }));\n}\n\nfunction encodeControlChange(cc, channel) {\n  return {\n    absoluteTime: cc.ticks,\n    channel: channel,\n    controllerType: cc.number,\n    deltaTime: 0,\n    type: \"controller\",\n    value: cc.value\n  };\n}\n\nfunction encodeControlChanges(track) {\n  var controlChanges = [];\n\n  for (var i = 0; i < 127; i++) {\n    if (track.controlChanges.hasOwnProperty(i)) {\n      track.controlChanges[i].forEach(function (cc) {\n        controlChanges.push(encodeControlChange(cc, track.channel));\n      });\n    }\n  }\n\n  return controlChanges;\n}\n\nfunction encodePitchBend(pb, channel) {\n  return {\n    absoluteTime: pb.ticks,\n    channel: channel,\n    deltaTime: 0,\n    type: \"pitchBend\",\n    value: pb.value\n  };\n}\n\nfunction encodePitchBends(track) {\n  var pitchBends = [];\n  track.pitchBends.forEach(function (pb) {\n    pitchBends.push(encodePitchBend(pb, track.channel));\n  });\n  return pitchBends;\n}\n\nfunction encodeInstrument(track) {\n  return {\n    absoluteTime: 0,\n    channel: track.channel,\n    deltaTime: 0,\n    programNumber: track.instrument.number,\n    type: \"programChange\"\n  };\n}\n\nfunction encodeTrackName(name) {\n  return {\n    absoluteTime: 0,\n    deltaTime: 0,\n    meta: true,\n    text: name,\n    type: \"trackName\"\n  };\n}\n\nfunction encodeTempo(tempo) {\n  return {\n    absoluteTime: tempo.ticks,\n    deltaTime: 0,\n    meta: true,\n    microsecondsPerBeat: Math.floor(60000000 / tempo.bpm),\n    type: \"setTempo\"\n  };\n}\n\nfunction encodeTimeSignature(timeSig) {\n  return {\n    absoluteTime: timeSig.ticks,\n    deltaTime: 0,\n    denominator: timeSig.timeSignature[1],\n    meta: true,\n    metronome: 24,\n    numerator: timeSig.timeSignature[0],\n    thirtyseconds: 8,\n    type: \"timeSignature\"\n  };\n} // function encodeMeta(event: )\n\n\nfunction encodeKeySignature(keySig) {\n  var keyIndex = Header_1.keySignatureKeys.indexOf(keySig.key);\n  return {\n    absoluteTime: keySig.ticks,\n    deltaTime: 0,\n    key: keyIndex + 7,\n    meta: true,\n    scale: keySig.scale === \"major\" ? 0 : 1,\n    type: \"keySignature\"\n  };\n}\n\nfunction encodeText(textEvent) {\n  return {\n    absoluteTime: textEvent.ticks,\n    deltaTime: 0,\n    meta: true,\n    text: textEvent.text,\n    type: textEvent.type\n  };\n}\n/**\n * Convert the midi object to an array\n */\n\n\nfunction encode(midi) {\n  var midiData = {\n    header: {\n      format: 1,\n      numTracks: midi.tracks.length + 1,\n      ticksPerBeat: midi.header.ppq\n    },\n    tracks: __spreadArrays([__spreadArrays([// the name data\n    {\n      absoluteTime: 0,\n      deltaTime: 0,\n      meta: true,\n      text: midi.header.name,\n      type: \"trackName\"\n    }], midi.header.keySignatures.map(function (keySig) {\n      return encodeKeySignature(keySig);\n    }), midi.header.meta.map(function (e) {\n      return encodeText(e);\n    }), midi.header.tempos.map(function (tempo) {\n      return encodeTempo(tempo);\n    }), midi.header.timeSignatures.map(function (timeSig) {\n      return encodeTimeSignature(timeSig);\n    }))], midi.tracks.map(function (track) {\n      return __spreadArrays([// add the name\n      encodeTrackName(track.name), // the instrument\n      encodeInstrument(track)], encodeNotes(track), encodeControlChanges(track), encodePitchBends(track));\n    }))\n  }; // sort and set deltaTime of all of the tracks\n\n  midiData.tracks = midiData.tracks.map(function (track) {\n    track = track.sort(function (a, b) {\n      return a.absoluteTime - b.absoluteTime;\n    });\n    var lastTime = 0;\n    track.forEach(function (note) {\n      note.deltaTime = note.absoluteTime - lastTime;\n      lastTime = note.absoluteTime;\n      delete note.absoluteTime;\n    }); // end of track\n\n    track.push({\n      deltaTime: 0,\n      meta: true,\n      type: \"endOfTrack\"\n    });\n    return track;\n  }); // return midiData\n\n  return new Uint8Array(midi_file_1.writeMidi(midiData));\n}\n\nexports.encode = encode;","map":null,"metadata":{},"sourceType":"module"}